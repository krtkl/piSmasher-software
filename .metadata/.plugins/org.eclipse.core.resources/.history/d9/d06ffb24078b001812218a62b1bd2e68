/**
 *******************************************************************************
 *******************************************************************************
 *
 * @file	tda998x.h
 * @author	R. Bush
 * @email	bush@krtkl.com
 * @version	v1.0
 * @date	2017 November 10
 * @brief	NXP TDA998x HDMI Transmitter
 * @license	FreeBSD
 *
 *******************************************************************************
 *
 * Copyright (c) 2017, krtkl inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *	  this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *	  this list of conditions and the following disclaimer in the documentation
 *	  and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * The views and conclusions contained in the software and documentation are
 * those of the authors and should not be interpreted as representing official
 * policies, either expressed or implied, of the FreeBSD Project.
 *
 *******************************************************************************
 */

#ifndef __TDA998X_H
#define __TDA998X_H

#ifdef __cplusplus
extern "C" {
#endif

/**
 * @addtogroup	TDA998X
 * @{
 */

/**
 * @brief
 */
enum tda998x_sink {
	SINK_DVI = 0,				/**< DVI  */
	SINK_HDMI = 0x01,			/**< HDMI */
	SINK_EDID = 0x02			/**< As currently defined in EDID */
};

enum tda998x_edid_state {
	EDID_NOT_READ = 0,
	EDID_READ
};

#define MTX_COEFF_LEN			(9)
struct tda998x_mtx_coeff {
	int16_t coeff[MTX_COEFF_LEN];
};

enum tda998x_vidin_mode {
	VINMODE_CCIR656 = 0,		/**< CCIR656 */
	VINMODE_RGB444,			/**< RGB444  */
	VINMODE_YUV444,			/**< YUV444  */
	VINMODE_YUV422,			/**< YUV422  */
#ifdef RGB_DDR_12BITS
	VINMODE_RGB_DDR_12BITS,
#endif
};

enum tda998x_sync_src {
	SYNCSRC_EMBEDDED = 0,		/**< Embedded sync */
	SYNCSRC_EXT_VREF = 1,		/**< External sync Vref, Href, Fref */
	SYNCSRC_EXT_VS = 2		/**< External sync Vs, Hs */
};

/**
 * @addtogroup	TDA998X_Video_In
 * @{
 */

enum tda998x_pix_rate {
	PIXRATE_DOUBLE = 0,		/**< Double pixel rate */
	PIXRATE_SINGLE = 1,		/**< Single pixel rate */
	PIXRATE_SINGLE_REPEATED = 2	/**< Single pixel repeated */
};

enum tda998x_upsample {
	UPSAMPLE_BYPASS = 0,		/**< Bypass */
	UPSAMPLE_COPY = 1,		/**< Copy */
	UPSAMPLE_INTERPOLATE = 2,	/**< Interpolate */
	UPSAMPLE_AUTO = 3,		/**< Auto: driver chooses best value */
};

enum tda998x_pix_tgl {
	PIXTOGL_NO_ACTION = 0,		/**< No Action  */
	PIXTOGL_ENABLE  = 1,		/**< Toggle     */
};
/**
 * @}
 */

enum tda998x_scaler_mode {
	SCALER_MODE_OFF = 0,		/**< Off  */
	SCALER_MODE_ON = 1,		/**< On   */
	SCALER_MODE_AUTO = 2,		/**< Auto */
	SCALER_MODE_NO_CHANGE = 3,	/**< No change */
	SCALER_MODE_INVALID = 4		/**< Invalid   */
};

enum tda998x_mtx_mode {
	MTX_MODE_OFF = 0,		/**< Off  */
	MTX_MODE_AUTO = 1,		/**< Auto */
};

enum tda998x_format_3d {
	FORMAT_3D_NONE = 0,		/**< 3D video data not present */
	FORMAT_3D_FRAME_PACKING = 1,	/**< Frame packing */
	FORMAT_3D_TOP_AND_BOTTOM = 2,	/**< Top and bottom */
	FORMAT_3D_SIDE_BY_SIDEF = 3,	/**< Side by side half structure */
};

enum tda998x_vidout_mode {
	VOUTMODE_RGB444 = 0,		/**< RGB444 */
	VOUTMODE_YUV422 = 1,		/**< YUV422 */
    	VOUTMODE_YUV444 = 2		/**< YUV444 */
};

enum tda998x_color_depth {
	COLORDEPTH_24 = 0,		/**< 8 bits per color */
	COLORDEPTH_30 = 1,		/**< 10 bits per color */
	COLORDEPTH_36 = 2,		/**< 12 bits per color */
	COLORDEPTH_48 = 3 		/**< 16 bits per color */
};

/**
 * @brief	Video quantization range
 */
enum tda998x_vqr {
	VQR_DEFAULT = 0,		/**< Follow HDMI spec. */
	VQR_RGB_FULL = 1,		/**< Force RGB FULL, DVI only */
	VQR_RGB_LIMITED = 2		/**< Force RGB LIMITED, DVI only */
};

/**
 * @addtogroup	TDA998X_Video_In
 * @{
 */

/**
 * @brief	Video Input Configuration
 */
struct tda998x_vidin_cfg {
//	enum tda998x_vid_fmt		format;		/**< Video format as defined by EIA/CEA 861-D */
	enum tda998x_vidin_mode		mode;		/**< Video mode (CCIR, RGB, YUV, etc.) */
	enum tda998x_sync_src		sync_src;	/**< Sync source type */
	enum tda998x_pix_rate		pix_rate;	/**< Pixel rate */
	enum tda998x_format_3d		format_3d;	/**< 3D structure as defined in HDMI1.4a */
};
/**
 * @}
 */

/**
 * @addtogroup	TDA998X_Video_Out
 * @{
 */

/**
 * @brief	Video Output Configuration
 */
struct tda998x_vidout_cfg {
//	enum tda998x_vid_fmt		format;		/**< Video format as defined by EIA/CEA 861-D */
	enum tda998x_vidout_mode	mode;		/**< Video mode (CCIR, RGB, YUV, etc.) */
	enum tda998x_color_depth	color_depth;	/**< Color depth */
	enum tda998x_vqr		vqr;		/**< VQR applied in DVI mode */
};
/**
 * @}
 */

struct tda998x_aud_packet {
	int hbr;		/**< High bitrate audio packet */
	int dst;		/**< Direct stream transport audio packet */
	int oba;		/**< One bit audio sample packet */
};

enum tda998x_aud_fmt {
	AFMT_SPDIF = 0,		/**< SPDIF */
	AFMT_I2S = 1,		/**< I2S */
	AFMT_OBA = 2,		/**< One bit audio / DSD */
	AFMT_DST = 3,		/**< DST */
	AFMT_HBR = 4		/**< HBR */
};

enum tda998x_aud_rate {
	AFS_32K = 0,		/**< 32kHz    */
	AFS_44K = 1,		/**< 44.1kHz  */
	AFS_48K = 2,		/**< 48kHz    */
	AFS_88K = 3,		/**< 88.2kHz  */
	AFS_96K = 4,		/**< 96kHz    */
	AFS_176K = 5,		/**< 176.4kHz */
	AFS_192K = 6		/**< 192kHz   */
};

/**
 * @brief	Audio I2S word length
 */
enum tda998x_aud_i2s_wlen {
	I2S_WLEN_16BITS = 16,	/**< 16 bits */
    	I2S_WLEN_32BITS = 32,	/**< 32 bits */
    	I2S_WLEN_OTHERS = 0	/**< for SPDIF and DSD */
};

/**
 * @brief	Audio I2S format
 */
enum tda998x_aud_i2s_fmt {
	I2S_FMT_PHILIPS_L = 12,	/**< Philips like format */
	I2S_FMT_OTH_L = 14,	/**< Left justified */
	I2S_FMT_OTH_R_16 = 11,	/**< 16-bits right justified */
	I2S_FMT_OTH_R_20 = 7,	/**< 20-bits right justified */
    	I2S_FMT_OTH_R = 15	/**< 24-bits right justified */
};

/**
 * @brief	DSD clock polarities
 */
enum tda998x_clkpol_dsd {
	CLKPOLDSD_ACLK = 0,		/**< Same as ACLK */
	CLKPOLDSD_NACLK = 1,	/**< Not ACLK, i.e. inverted */
	CLKPOLDSD_NO_CHANGE = 2,	/**< No change */
	CLKPOLDSD_INVALID = 3	/**< Invalid */
};

/**
 * @brief	DSD data swap values
 */
enum tda998x_swap_dsd {
	SWAPDSD_OFF = 0,	/**< No swap */
	SWAPDSD_ON = 1,		/**< Swap */
	SWAPDSD_NO_CHANGE = 2,	/**< No change */
	SWAPDSD_INVALID = 3	/**< Invalid*/
};

/**
 * @brief	DSD data transfer rates
 */
enum tda998x_dst_rate {
	DST_RATE_SINGLE = 0,	/**< Single transfer rate */
	DST_RATE_DOUBLE = 1	/**< Double data rate */
};

struct tda998x_aud_ch_status {
//    tmdlHdmiTxAudioData_t          PcmIdentification;
//    tmdlHdmiTxCScopyright_t        CopyrightInfo;
//    tmdlHdmiTxCSformatInfo_t       FormatInfo;
	uint8_t				cat_code;
//    tmdlHdmiTxCSclkAcc_t           clockAccuracy;
//    tmdlHdmiTxCSmaxWordLength_t    maxWordLength;
//    tmdlHdmiTxCSwordLength_t       wordLength;
//    tmdlHdmiTxCSorigAfs_t          origSampleFreq;
};

struct tda998x_audin_cfg {
	enum tda998x_aud_fmt		format;			/**< Audio format (I2S, SPDIF, etc.) */
	enum tda998x_aud_rate		rate;			/**< Audio sampling rate */
	enum tda998x_aud_i2s_fmt	i2s_format;		/**< I2S format of the audio input */
	enum tda998x_aud_i2s_wlen	i2s_wlen;		/**< I2S qualifier of the audio input (8,16,32 bits) */
	enum tda998x_dst_rate		dst_rate;		/**< DST data transfer rate */
	uint8_t				ch_alloc;		/**< Ref to CEA-861D p85 */
	struct tda998x_aud_ch_status	ch_status;		/**< Ref to IEC 60958-3 */
};

/**
 * @brief	TDA998X driver configuration
 */
struct tda998x_cfg {
	uint8_t				id;
	uint16_t			hdmi_addr;
	uint16_t			cec_addr;
	int (*i2c_write)		(uint16_t addr, uint8_t reg, uint8_t *data);
	int (*i2c_read)			(uint16_t addr, uint8_t reg, uint8_t *data);
	uint8_t				cur_page;
};

/**
 * @brief	TDA998X device
 */
struct tda998x_dev {
	int				id;
	struct tda998x_cfg		*cfg;
	struct tda998x_vidin_cfg	*vin_cfg;
	struct tda998x_vidout_cfg	*vout_cfg;
	uint8_t				features;
	uint16_t			version;
	enum tda998x_sink		sink;
	enum tda998x_sink		edid_sink;
	enum tda998x_edid_state		edid_state;
};

int tda998x_init(struct tda998x_dev *dev, struct tda998x_vidin_cfg *vin_cfg);
int tda998x_set_inout(struct tda998x_dev *dev,
		struct tda998x_vidin_cfg *vin_cfg,
		struct tda998x_vidout_cfg *vout_cfg,
		enum tda998x_sink sink);
/**
 * @}
 */

#ifdef __cplusplus
}
#endif

#endif /* __TDA998X_H */
