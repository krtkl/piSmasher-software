/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <unistd.h>

#include "i2c.h"
#include "spi.h"

//#include "tmNxTypes.h"
//#include "tmNxCompid.h"
//#include "tmdlHdmiTx_Types.h"
//#include "tmdlHdmiTx_Functions.h"

#include "video_sources.h"

#include "hdmi_rx.h"

#include "led_display.h"

//#include "tlv320aic3104.h"
#include "audio.h"
#include "is31fl373x.h"

//#include "gs2971.h"
#include "sdi_rx.h"

#include "stream_ctrl.h"


#define ERROR_PRINT(__format__, ...)		printf("[ERROR] %s() %s %d: " __format__ "\r\n", __FUNCTION__, __FILE__, __LINE__, ##__VA_ARGS__)

#ifdef DEBUG_INFO
# define INFO_PRINT(__format__, ...)		printf("[INFO] %s() %s %d: " __format__ "\r\n", __FUNCTION__, __FILE__, __LINE__, ##__VA_ARGS__)
#else
# define INFO_PRINT(...)					do {} while (0)
#endif

#ifdef DEBUG
# define DEBUG_PRINT(__format__, ...)		printf("[DEBUG] %s() %s %d: " __format__ "\r\n", __FUNCTION__, __FILE__, __LINE__, ##__VA_ARGS__)
#else
# define DEBUG_PRINT(...)			do {} while (0)
#endif


//static tmInstance_t HdmiTxInstance;

//static tmdlHdmiTxVideoInConfig_t HdmiTxVideoInputConfig;
//static tmdlHdmiTxVideoOutConfig_t HdmiTxVideoOutputConfig;
//static tmdlHdmiTxAudioInConfig_t HdmiTxAudioInputConfig;

#define UNIT_I2C_ADDRESS_0 0x73
#define CEC_UNIT_I2C_ADDRESS_0 0x37



static int tda998x_init(void)
{
	int err;

	/* Initialize I2C devices for HDMI and CEC core */
	err = i2c_init(UNIT_I2C_ADDRESS_0);
	if (err < 0)
		return err;

	err = i2c_init(CEC_UNIT_I2C_ADDRESS_0);
	if (err < 0)
		return err;

//	reg_val = 0x02;
//	ErrCode = i2c_write_reg(CEC_UNIT_I2C_ADDRESS_0, 0xFF, &reg_val);
//	if (ErrCode < 0)
//		return ErrCode;
//
//	reg_val = 0x00;
//	ErrCode = i2c_write_reg(UNIT_I2C_ADDRESS_0, 0xFF, &reg_val);
//	if (ErrCode < 0)
//		return ErrCode;
//
//	/* Predefined value for 1080p@60 */
//	reg_val = 0x06;
//	ErrCode = i2c_write_reg(UNIT_I2C_ADDRESS_0, 0xA0, &reg_val);
//	if (ErrCode < 0)
//		return ErrCode;
//
//	/* Disable color bars */
//	reg_val = 0x00;
//	ErrCode = i2c_write_reg(UNIT_I2C_ADDRESS_0, 0xE4, &reg_val);
//	if (ErrCode < 0)
//		return ErrCode;
//
//	/* 8-bits datapath, RGB/YUV quantization, 422 output format */
//	reg_val = 0x75;
//	ErrCode = i2c_write_reg(UNIT_I2C_ADDRESS_0, 0xE5, &reg_val);
//	if (ErrCode < 0)
//		return ErrCode;
//
//	/* Disable VPA */
//	reg_val = 0x00;
//	ErrCode = i2c_write_reg(UNIT_I2C_ADDRESS_0, 0x18, &reg_val);
//	if (ErrCode < 0)
//		return ErrCode;
//
//	/* s_vp[23:20] => d_vp[23:20], s_vp[19:16] => d_vp[19:16] */
//	reg_val = 0x01;
//	ErrCode = i2c_write_reg(UNIT_I2C_ADDRESS_0, 0x20, &reg_val);
//	if (ErrCode < 0)
//		return ErrCode;
//
//	/* s_vp[15:12] => d_vp[7:4] (disabled), s_vp[11:8] => d_vp[15:12] */
//	reg_val = 0x42;
//	ErrCode = i2c_write_reg(UNIT_I2C_ADDRESS_0, 0x21, &reg_val);
//	if (ErrCode < 0)
//		return ErrCode;
//
//	/* s_vp[7:4] => d_vp[11:8], s_vp[3:0] => d_vp[3:0] (disabled) */
//	reg_val = 0x35;
//	ErrCode = i2c_write_reg(UNIT_I2C_ADDRESS_0, 0x22, &reg_val);
//	if (ErrCode < 0)
//		return ErrCode;
//
//	/* YUV422 blankcodes */
//	reg_val = 0x03;
//	ErrCode = i2c_write_reg(UNIT_I2C_ADDRESS_0, 0x24, &reg_val);
//	if (ErrCode < 0)
//		return ErrCode;

//	INFO_PRINT("tmdlHdmiTxOpen()");
//	err = tmdlHdmiTxOpen(&HdmiTxInstance);
//	if (err) {
//		ERROR_PRINT("%d = tmdlHdmiTxOpen()", err);
//		return err;
//	}

//	INFO_PRINT("tmdlHdmiTxInstanceConfig()");
//	err = tmdlHdmiTxInstanceConfig(HdmiTxInstance);
//	if (err) {
//			ERROR_PRINT("%d = tmdlHdmiTxInstanceConfig()", err);
//			return err;
//	}

	/* Configure video input */
//	HdmiTxVideoInputConfig.format = TMDL_HDMITX_VFMT_16_1920x1080p_60Hz;
//	HdmiTxVideoInputConfig.mode = TMDL_HDMITX_VINMODE_YUV422;
//	HdmiTxVideoInputConfig.syncSource = TMDL_HDMITX_SYNCSRC_EXT_VS;
//	HdmiTxVideoInputConfig.pixelRate = TMDL_HDMITX_PIXRATE_SINGLE;
//	HdmiTxVideoInputConfig.structure3D = TMDL_HDMITX_3D_NONE;

	/* Configure video output */
//	HdmiTxVideoOutputConfig.format = TMDL_HDMITX_VFMT_16_1920x1080p_60Hz;
//	HdmiTxVideoOutputConfig.mode = TMDL_HDMITX_VOUTMODE_YUV422;
//	HdmiTxVideoOutputConfig.colorDepth = TMDL_HDMITX_COLORDEPTH_24;
//	HdmiTxVideoOutputConfig.dviVqr = TMDL_HDMITX_VQR_DEFAULT;

	/* Configure audio input */
//	HdmiTxAudioInputConfig.channelStatus.PcmIdentification = TMDL_HDMITX_AUDIO_DATA_PCM;
//	HdmiTxAudioInputConfig.channelStatus.CopyrightInfo = TMDL_HDMITX_CSCOPYRIGHT_UNPROTECTED;
//	HdmiTxAudioInputConfig.channelStatus.FormatInfo = TMDL_HDMITX_CSFI_PCM_2CHAN_NO_PRE;
//	HdmiTxAudioInputConfig.channelStatus.categoryCode = 0;
//	HdmiTxAudioInputConfig.channelStatus.clockAccuracy = TMDL_HDMITX_CSCLK_LEVEL_II;
//	HdmiTxAudioInputConfig.channelStatus.maxWordLength = TMDL_HDMITX_CSMAX_LENGTH_24;
//	HdmiTxAudioInputConfig.channelStatus.wordLength = TMDL_HDMITX_CSWORD_DEFAULT;
//	HdmiTxAudioInputConfig.channelStatus.origSampleFreq = TMDL_HDMITX_CSOFREQ_48k;

//	HdmiTxAudioInputConfig.format = TMDL_HDMITX_AFMT_I2S;
//	HdmiTxAudioInputConfig.rate = TMDL_HDMITX_AFS_48K;
//	HdmiTxAudioInputConfig.i2sFormat = TMDL_HDMITX_I2SFOR_PHILIPS_L;
//	HdmiTxAudioInputConfig.i2sQualifier = TMDL_HDMITX_I2SQ_16BITS;
//	HdmiTxAudioInputConfig.dstRate = TMDL_HDMITX_DSTRATE_SINGLE;
//	HdmiTxAudioInputConfig.channelAllocation = 1;

//	INFO_PRINT("tmdlHdmiTxSetInputOutput()");
//	err = tmdlHdmiTxSetInputOutput(HdmiTxInstance, HdmiTxVideoInputConfig, HdmiTxVideoOutputConfig, HdmiTxAudioInputConfig, TMDL_HDMITX_SINK_HDMI);
//	if (err) {
//		ERROR_PRINT("%d = tmdlHdmiTxSetInputOutput()", err);
//		return err;
//	}

	return (0);
}


static int hdmi_init(void)
{
	int err;

	PRNT("%-30s", "Initializing TDA1997x HDMI receiver\n");
	err = hdmi_rx_init();
//	err = HdmiRx_Setup();
	if (err) {
		ERROR_PRINT("%d = hdmi_rx_init()", err);
		return err;
	}

	PRNT("done.\n");

	PRNT("%-30s", "Initializing TD998x HDMI transmitter\n");
	err = tda998x_init();
	if (err) {
		ERROR_PRINT("%d = tda998x_init()", err);
		return err;
	}

	PRNT("done.\n");

	return (0);
}


int main(int argc, char **argv)
{
	int err;
//	struct led_display led_disp;

	PRNT("--------------------------------------------------------\n");
	PRNT("piSmasher HDMI Configuration and Test Utility\n");

	PRNT_ARGS("Compiled: %s %s\n\n", __DATE__, __TIME__);

//	PRNT("--- Initializing SPI interface\n");
//	err = spi_init();
//	if (err < 0)
//		ERROR_PRINT("%d = spi_init()", err);

//	PRNT("--- Initializing LED display\n");
//	err = led_disp_init(&led_disp);
//	if (err < 0)
//		PRNT("     > No display was detected\n");

//	PRNT("--- Initializing audio codec\n");
//	err = aud_init();
//	if (err)
//		ERROR_PRINT("%d = aud_init()", err);

//	PRNT("--- Enabling stream control\n");
//	err = strm_ctrl_init();
//	if (err < 0)
//		ERROR_PRINT("%d = strm_ctrl_init()", err);

//	PRNT("--- Initializing SDI interfaces\n");
//	err = sdi_rx_init();
//	if (err < 0)
//		ERROR_PRINT("%d = sdi_rx_init()", err);

	PRNT("--- Initializing HDMI interfaces\n");
	err = hdmi_init();
	if (err < 0)
		ERROR_PRINT("%d = hdmi_init()", err);

	exit(err);
}
