/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <unistd.h>

#include "i2c.h"

#include "tmNxTypes.h"
#include "tmNxCompid.h"
#include "tmdlHdmiTx_Types.h"
#include "tmdlHdmiTx_Functions.h"

#include "hdmi_rx.h"
#include "hdmi_tx.h"

//#include "tlv320aic3104.h"
#include "audio.h"

#define ERROR_PRINT(__format__, ...)		printf("[ERROR] %s() %s %d: " __format__ "\r\n", __FUNCTION__, __FILE__, __LINE__, ##__VA_ARGS__)

#ifdef DEBUG_INFO
# define INFO_PRINT(__format__, ...)		printf("[INFO] %s() %s %d: " __format__ "\r\n", __FUNCTION__, __FILE__, __LINE__, ##__VA_ARGS__)
#else
# define INFO_PRINT(...)					do {} while (0)
#endif

#ifdef DEBUG
# define DEBUG_PRINT(__format__, ...)		printf("[DEBUG] %s() %s %d: " __format__ "\r\n", __FUNCTION__, __FILE__, __LINE__, ##__VA_ARGS__)
#else
# define DEBUG_PRINT(...)			do {} while (0)
#endif

#define UNIT_I2C_ADDRESS_0 0x72
#define CEC_UNIT_I2C_ADDRESS_0 0x36

static tmInstance_t HdmiTxInstance;

static tmdlHdmiTxVideoInConfig_t HdmiTxVideoInputConfig;
static tmdlHdmiTxVideoOutConfig_t HdmiTxVideoOutputConfig;
static tmdlHdmiTxAudioInConfig_t HdmiTxAudioInputConfig;


static int hdmi_transmit_init(void)
{
	int ret;
	uint8_t reg_val;


	/* CEC: ENAMODS */
	reg_val = 0x87;
	ret = i2c_write_reg(CEC_UNIT_I2C_ADDRESS_0, 0xFF, &reg_val);
	if (ret < 0)
		return ret;

	/* HDMI: VIDFORMAT - This is a dummy write to force update of the format */
	reg_val = 0x1F;
	ret = i2c_write_reg(UNIT_I2C_ADDRESS_0, 0xA0, &reg_val);
	if (ret < 0)
		return ret;

	/* HDMI: HVF_CNTRL_[0:1] - HDMI video formatter registers */
	reg_val = 0x00;
	ret = i2c_write_reg(UNIT_I2C_ADDRESS_0, 0xE4, &reg_val);
	if (ret < 0)
		return ret;

	reg_val = 0x00;
	ret = i2c_write_reg(UNIT_I2C_ADDRESS_0, 0xE5, &reg_val);
	if (ret < 0)
		return ret;

	/* HDMI: RPT_CNTRL - Pixel repeat control */
	reg_val = 0x00;
	ret = i2c_write_reg(UNIT_I2C_ADDRESS_0, 0xF0, &reg_val);
	if (ret < 0)
		return ret;

	/* HDMI: VIP_CNTRL_[0:2] - Video input port control */
	reg_val = 0x45;
	ret = i2c_write_reg(UNIT_I2C_ADDRESS_0, 0x20, &reg_val);
	if (ret < 0)
		return ret;

	reg_val = 0x23;
	ret = i2c_write_reg(UNIT_I2C_ADDRESS_0, 0x21, &reg_val);
	if (ret < 0)
		return ret;

	reg_val = 0x01;
	ret = i2c_write_reg(UNIT_I2C_ADDRESS_0, 0x22, &reg_val);
	if (ret < 0)
		return ret;

	/* HDMI: VIP_CNTRL_3 - Video input port control 3 */
	reg_val = 0x16;
	ret = i2c_write_reg(UNIT_I2C_ADDRESS_0, 0x23, &reg_val);
	if (ret < 0)
		return ret;

	/* HDMI: VIP_CNTRL_4 - Video input port control 4 */
	reg_val = 0x01;
	ret = i2c_write_reg(UNIT_I2C_ADDRESS_0, 0x24, &reg_val);
	if (ret < 0)
		return ret;

	/* Set sync method */
	ret = i2c_read_reg(UNIT_I2C_ADDRESS_0, 0xCA, &reg_val);
	if (ret < 0)
		return ret;

	reg_val |= (1 << 7);
	ret = i2c_write_reg(UNIT_I2C_ADDRESS_0, 0xCA, &reg_val);
	if (ret < 0)
		return ret;

	ret = i2c_read_reg(UNIT_I2C_ADDRESS_0, 0xCB, &reg_val);
	if (ret < 0)
		return ret;

	reg_val &= ~(0x3F);
	reg_val |= 0x3F;
	ret = i2c_read_reg(UNIT_I2C_ADDRESS_0, 0xCB, &reg_val);
	if (ret < 0)
		return ret;

//	struct sync_desc {
//	   UInt16 Vs2;
//	   UInt8 pix_rep;
//	   UInt8 v_toggle;
//	   UInt8 h_toggle;
//	   UInt16 hfp;    /* Output values for Vs/Hs input sync */
//	   UInt16 vfp;
//	   UInt16 href; /* Output values for all other input sync sources */
//	   UInt16 vref;
//	};

//	    switch (syncSource)
//	    {
//	    case HDMITX_SYNCSRC_EXT_VS:
//	        syncMethod = 0;
//	        toggleV    = sync[BASE(reg_idx)].v_toggle;
//	        toggleH    = sync[BASE(reg_idx)].h_toggle;
//	        toggleX    = 0;
//	        uRefPix    = sync[BASE(reg_idx)].hfp;
//	        uRefLine   = sync[BASE(reg_idx)].vfp;
//	        break;
//	    case HDMITX_SYNCSRC_EMBEDDED:
//	        embedded++;
//	        /* fall thru */
//	    case HDMITX_SYNCSRC_EXT_VREF:
//	    default:
//	        syncMethod = 1;
//	        toggleV    = 1;
//	        toggleH    = 1;
//	        toggleX    = 1;
//	        uRefPix    = sync[BASE(reg_idx)].href;
//	        uRefLine   = sync[BASE(reg_idx)].vref;
//	        break;
//	    }


//	   {0,       0,  0,  0,  111,  2, 371, 26}, /* E_REGVFMT_1280x720p_60Hz  */


	   /*  NPIX    NLINE  VsLineStart  VsPixStart  VsLineEnd   VsPixEnd    HsStart     HsEnd   ActiveVideoStart   ActiveVideoEnd DeStart DeEnd */
	   /*  npix    nline  vsl_s1       vsp_s1      vsl_e1      vsp_e1      hs_e        hs_e    vw_s1              vw_e1          de_s    de_e */
//	   {1650,   1500,    1,          110,         6,           110,        110,    150,    25,         1495,   370,   1650, 746, 776},/* E_REGVFMT_1280x720p_60Hz_FP  */

	/* HDMI: NPIX_MSB */
	reg_val = 0x06;
	ret = i2c_write_reg(UNIT_I2C_ADDRESS_0, 0xA5, &reg_val);
	if (ret < 0)
		return ret;

	reg_val = 0x72;
	ret = i2c_write_reg(UNIT_I2C_ADDRESS_0, 0xA6, &reg_val);
	if (ret < 0)
		return ret;

	/* HDMI: NLINE_MSB */
	reg_val = 0x05;
	ret = i2c_write_reg(UNIT_I2C_ADDRESS_0, 0xA7, &reg_val);
	if (ret < 0)
		return ret;

	reg_val = 0xDC;
	ret = i2c_write_reg(UNIT_I2C_ADDRESS_0, 0xA8, &reg_val);
	if (ret < 0)
		return ret;

	/* HDMI: VS_LINE_STRT_1_MSB */
	reg_val = 0x00;
	ret = i2c_write_reg(UNIT_I2C_ADDRESS_0, 0xA9, &reg_val);
	if (ret < 0)
		return ret;

	reg_val = 0x01;
	ret = i2c_write_reg(UNIT_I2C_ADDRESS_0, 0xAA, &reg_val);
	if (ret < 0)
		return ret;

	/* HDMI: VS_PIX_STRT_1_MSB */
	reg_val = 0x00;
	ret = i2c_write_reg(UNIT_I2C_ADDRESS_0, 0xAB, &reg_val);
	if (ret < 0)
		return ret;

	reg_val = 0x6E;
	ret = i2c_write_reg(UNIT_I2C_ADDRESS_0, 0xAC, &reg_val);
	if (ret < 0)
		return ret;

	/* HDMI: VS_LINE_END_1_MSB */
	reg_val = 0x00;
	ret = i2c_write_reg(UNIT_I2C_ADDRESS_0, 0xAD, &reg_val);
	if (ret < 0)
		return ret;

	reg_val = 0x06;
	ret = i2c_write_reg(UNIT_I2C_ADDRESS_0, 0xAE, &reg_val);
	if (ret < 0)
		return ret;

	/* HDMI: VS_PIX_END_1_MSB */
	reg_val = 0x00;
	ret = i2c_write_reg(UNIT_I2C_ADDRESS_0, 0xAF, &reg_val);
	if (ret < 0)
		return ret;

	reg_val = 0x6E;
	ret = i2c_write_reg(UNIT_I2C_ADDRESS_0, 0xB0, &reg_val);
	if (ret < 0)
		return ret;

	/* HDMI: HS_PIX_START_MSB */
	reg_val = 0x00;
	ret = i2c_write_reg(UNIT_I2C_ADDRESS_0, 0xB9, &reg_val);
	if (ret < 0)
		return ret;

	reg_val = 0x6E;
	ret = i2c_write_reg(UNIT_I2C_ADDRESS_0, 0xBA, &reg_val);
	if (ret < 0)
		return ret;

	/* HDMI: HS_PIX_STOP_MSB */
	reg_val = 0x00;
	ret = i2c_write_reg(UNIT_I2C_ADDRESS_0, 0xBB, &reg_val);
	if (ret < 0)
		return ret;

	reg_val = 0x96;
	ret = i2c_write_reg(UNIT_I2C_ADDRESS_0, 0xBC, &reg_val);
	if (ret < 0)
		return ret;

	/* HDMI: VWIN_START_1_MSB */
	reg_val = 0x00;
	ret = i2c_write_reg(UNIT_I2C_ADDRESS_0, 0xBD, &reg_val);
	if (ret < 0)
		return ret;

	reg_val = 0x19;
	ret = i2c_write_reg(UNIT_I2C_ADDRESS_0, 0xBE, &reg_val);
	if (ret < 0)
		return ret;

	/* HDMI: VWIN_END_1_MSB */
	reg_val = 0x05;
	ret = i2c_write_reg(UNIT_I2C_ADDRESS_0, 0xBF, &reg_val);
	if (ret < 0)
		return ret;

	reg_val = 0xD7;
	ret = i2c_write_reg(UNIT_I2C_ADDRESS_0, 0xC0, &reg_val);
	if (ret < 0)
		return ret;

	/* HDMI: DE_START_MSB */
	reg_val = 0x01;
	ret = i2c_write_reg(UNIT_I2C_ADDRESS_0, 0xC5, &reg_val);
	if (ret < 0)
		return ret;

	reg_val = 0x72;
	ret = i2c_write_reg(UNIT_I2C_ADDRESS_0, 0xC6, &reg_val);
	if (ret < 0)
		return ret;

	/* HDMI: DE_STOP_MSB */
	reg_val = 0x06;
	ret = i2c_write_reg(UNIT_I2C_ADDRESS_0, 0xC7, &reg_val);
	if (ret < 0)
		return ret;

	reg_val = 0x72;
	ret = i2c_write_reg(UNIT_I2C_ADDRESS_0, 0xC8, &reg_val);
	if (ret < 0)
		return ret;

	reg_val = 0x02;
	ret = i2c_write_reg(UNIT_I2C_ADDRESS_0, 0xA0, &reg_val);
	if (ret < 0)
		return ret;

	/* Set sync method */
	ret = i2c_read_reg(UNIT_I2C_ADDRESS_0, 0xCA, &reg_val);
	if (ret < 0)
		return ret;

	reg_val &= ~(1 << 7);
	ret = i2c_write_reg(UNIT_I2C_ADDRESS_0, 0xCA, &reg_val);
	if (ret < 0)
		return ret;

	reg_val |= (1 << 7);
	ret = i2c_write_reg(UNIT_I2C_ADDRESS_0, 0xCA, &reg_val);
	if (ret < 0)
		return ret;

	/* Bypass matrix control */
	reg_val = (1 << 2);
	ret = i2c_write_reg(UNIT_I2C_ADDRESS_0, 0x80, &reg_val);
	if (ret < 0)
		return ret;
}


static int
hdmi_init(void)
{
	int err;

	printf("%-30s", "Initializing TDA1997x HDMI receiver\n");
	err = hdmi_rx_init();
//	err = HdmiRx_Setup();
	if (err) {
		ERROR_PRINT("%d = hdmi_rx_init()", err);
		return err;
	}

	printf("done.\n");

	printf("%-30s", "Initializing TD998x HDMI transmitter\n");
//	err = hdmi_tx_init();
//	err = tda998x_init();
//	if (err) {
//		ERROR_PRINT("%x = tda998x_init()", err);
//		return err;
//	}

	/* Initialize I2C devices for HDMI and CEC core */
	err = i2c_init(UNIT_I2C_ADDRESS_0);
	if (err < 0)
		return err;

	err = i2c_init(CEC_UNIT_I2C_ADDRESS_0);
	if (err < 0)
		return err;

	return hdmi_transmit_init();

	INFO_PRINT("tmdlHdmiTxOpen()");
	err = tmdlHdmiTxOpen(&HdmiTxInstance);
	if (err) {
		ERROR_PRINT("%x = tmdlHdmiTxOpen()", err);
		return err;
	}

	INFO_PRINT("tmdlHdmiTxInstanceConfig()");
	err = tmdlHdmiTxInstanceConfig(HdmiTxInstance);
	if (err) {
		ERROR_PRINT("%x = tmdlHdmiTxInstanceConfig()", err);
		return err;
	}

	/* Configure video input */
	HdmiTxVideoInputConfig.format = TMDL_HDMITX_VFMT_04_1280x720p_60Hz;
	HdmiTxVideoInputConfig.mode = TMDL_HDMITX_VINMODE_RGB444;
	HdmiTxVideoInputConfig.syncSource = TMDL_HDMITX_SYNCSRC_EXT_VS;
	HdmiTxVideoInputConfig.pixelRate = TMDL_HDMITX_PIXRATE_SINGLE;
	HdmiTxVideoInputConfig.structure3D = TMDL_HDMITX_3D_NONE;

	/* Configure video output */
	HdmiTxVideoOutputConfig.format = TMDL_HDMITX_VFMT_04_1280x720p_60Hz;
	HdmiTxVideoOutputConfig.mode = TMDL_HDMITX_VOUTMODE_RGB444;
	HdmiTxVideoOutputConfig.colorDepth = TMDL_HDMITX_COLORDEPTH_24;
	HdmiTxVideoOutputConfig.dviVqr = TMDL_HDMITX_RGB_FULL;

	/* Configure audio input */
	HdmiTxAudioInputConfig.channelStatus.PcmIdentification = TMDL_HDMITX_AUDIO_DATA_PCM;
	HdmiTxAudioInputConfig.channelStatus.CopyrightInfo = TMDL_HDMITX_CSCOPYRIGHT_UNPROTECTED;
	HdmiTxAudioInputConfig.channelStatus.FormatInfo = TMDL_HDMITX_CSFI_PCM_2CHAN_NO_PRE;
	HdmiTxAudioInputConfig.channelStatus.categoryCode = 0;
	HdmiTxAudioInputConfig.channelStatus.clockAccuracy = TMDL_HDMITX_CSCLK_LEVEL_II;
	HdmiTxAudioInputConfig.channelStatus.maxWordLength = TMDL_HDMITX_CSMAX_LENGTH_24;
	HdmiTxAudioInputConfig.channelStatus.wordLength = TMDL_HDMITX_CSWORD_DEFAULT;
	HdmiTxAudioInputConfig.channelStatus.origSampleFreq = TMDL_HDMITX_CSOFREQ_48k;

	HdmiTxAudioInputConfig.format = TMDL_HDMITX_AFMT_I2S;
	HdmiTxAudioInputConfig.rate = TMDL_HDMITX_AFS_48K;
	HdmiTxAudioInputConfig.i2sFormat = TMDL_HDMITX_I2SFOR_PHILIPS_L;
	HdmiTxAudioInputConfig.i2sQualifier = TMDL_HDMITX_I2SQ_16BITS;
	HdmiTxAudioInputConfig.dstRate = TMDL_HDMITX_DSTRATE_SINGLE;
	HdmiTxAudioInputConfig.channelAllocation = 1;

	INFO_PRINT("tmdlHdmiTxSetInputOutput()");
	err = tmdlHdmiTxSetInputOutput(HdmiTxInstance, HdmiTxVideoInputConfig, HdmiTxVideoOutputConfig, HdmiTxAudioInputConfig, TMDL_HDMITX_SINK_HDMI);
	if (err) {
		ERROR_PRINT("%d = tmdlHdmiTxSetInputOutput()", err);
		return err;
	}

	printf("done.\n");

	return (0);
}


int
main(int argc, char **argv)
{
	int err;

	printf("--------------------------------------------------------\n");
	printf("piSmasher HDMI Configuration and Test Utility\n");

	printf("Compiled: %s %s\n\n", __DATE__, __TIME__);

	printf("--- Initializing HDMI interfaces\n");
	err = hdmi_init();
	if (err < 0)
		ERROR_PRINT("%x = hdmi_init()", err);

	exit(err);
}
