/**
 *******************************************************************************
 *******************************************************************************
 *
 * @file    axissw.c
 * @author  R. Bush
 * @email   bush@krtkl.com
 * @version 0.1
 * @date    July 10, 2018
 * @brief   AXI-Stream Switch Userspace I/O Driver
 * @license FreeBSD
 *
 *******************************************************************************
 *
 * Copyright (c) 2018, krtkl inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * The views and conclusions contained in the software and documentation are
 * those of the authors and should not be interpreted as representing official
 * policies, either expressed or implied, of the FreeBSD Project.
 *
 *******************************************************************************
 */


#include <sys/mman.h>
#include <stdbool.h>
#include <fcntl.h>


#define REG_READ(__BASE__, __OFFSET__)					\
		*((volatile unsigned long *)((__BASE__) + (__OFFSET__)))

#define REG_WRITE(__BASE__, __OFFSET__, __DATA__)				\
		*((volatile unsigned long *)((__BASE__) + (__OFFSET__))) = (__DATA__)

#define AXISSW_CTRL			(0x00000000U)	/**< Control register */
#define AXISSW_CTRL_UPDATE		(1 << 1)	/**< Commit/update bit */

#define AXISSW_MI00_MUX			(0x00000040U)
#define AXISSW_MI01_MUX			(0x00000044U)
#define AXISSW_MI02_MUX			(0x00000048U)
#define AXISSW_MI03_MUX			(0x0000004cU)
#define AXISSW_MI04_MUX			(0x00000050U)
#define AXISSW_MI05_MUX			(0x00000054U)
#define AXISSW_MI06_MUX			(0x00000058U)
#define AXISSW_MI07_MUX			(0x0000005cU)
#define AXISSW_MI08_MUX			(0x00000060U)
#define AXISSW_MI09_MUX			(0x00000064U)
#define AXISSW_MI10_MUX			(0x00000068U)
#define AXISSW_MI11_MUX			(0x0000006cU)
#define AXISSW_MI12_MUX			(0x00000070U)
#define AXISSW_MI13_MUX			(0x00000074U)
#define AXISSW_MI14_MUX			(0x00000078U)
#define AXISSW_MI15_MUX			(0x0000007cU)

#define AXISSW_MUX_IN_MASK		(0x0000000FU)

/**
 * @brief	AXIS Switch MUX Input Selection Enumeration
 */
typedef enum _AxisSw_MuxIn {
	AXISSW_SI00 = 0x00,
	AXISSW_SI01 = 0x01,
	AXISSW_SI02 = 0x02,
	AXISSW_SI03 = 0x03,
	AXISSW_SI04 = 0x04,
	AXISSW_SI05 = 0x05,
	AXISSW_SI06 = 0x06,
	AXISSW_SI07 = 0x07,
	AXISSW_SI08 = 0x08,
	AXISSW_SI09 = 0x09,
	AXISSW_SI10 = 0x0a,
	AXISSW_SI11 = 0x0b,
	AXISSW_SI12 = 0x0c,
	AXISSW_SI13 = 0x0d,
	AXISSW_SI14 = 0x0e,
	AXISSW_SI15 = 0x0f
} AxisSw_MuxIn;

#define AXISSW_MUX_DISABLE		(1 << 31)

/**
 * @brief	AXIS Switch Device Structure
 */
typedef struct _AxisSw {
	void *base;
} AxisSw;


/**
 * @brief	Update the Switch Configuration
 */
static int
axissw_update(AxisSw *sw)
{
	REG_WRITE(sw->base, AXISSW_CTRL, AXISSW_CTRL_UPDATE);

	return 0;
}

int
axissw_port_enable(AxisSw *sw, int port, bool en)
{
	unsigned long reg, reg_val;

	reg = AXISSW_MI00_MUX + (port * 4);

	reg_val = REG_READ(sw->base, reg);
	if (en)
		reg_val &= ~(AXISSW_MUX_DISABLE);
	else
		reg_val |= AXISSW_MUX_DISABLE;

	REG_WRITE(sw->base, reg, reg_val);

	return 0;
}

int
axissw_port_config(AxisSw *sw, int port, AxisSw_MuxIn cfg)
{
	unsigned long reg, reg_val;

	reg = AXISSW_MI00_MUX + (port * 4);

	REG_WRITE(sw->base, reg, (unsigned long)cfg);

	axissw_update(sw);

	return 0;
}

int
axissw_init(AxisSw *sw)
{
	int fd, ret;
	void *base;

	if (sw == NULL)
		return -1;

	fd = open("/dev/uio0", O_RDWR);
	if (fd < 0)
		return fd;

	base = mmap(NULL, size, PROT_READ | PROT_WRITE, MAP_PRIVATE, fd, 0);
	if (base == MAP_FAILED) {
		ret = -ENOMEM;
		goto out;
	}

	sw->base = base;

out:
	close(fd);

	return ret;
}
