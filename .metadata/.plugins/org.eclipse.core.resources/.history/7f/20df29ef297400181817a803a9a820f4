/**
 *******************************************************************************
 *******************************************************************************
 *
 * @file	tda998x.h
 * @author	R. Bush
 * @email	bush@krtkl.com
 * @version	v1.0
 * @date	2017 November 10
 * @brief	NXP TDA998x HDMI Transmitter
 * @license	FreeBSD
 *
 *******************************************************************************
 *
 * Copyright (c) 2017, krtkl inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *	  this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *	  this list of conditions and the following disclaimer in the documentation
 *	  and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * The views and conclusions contained in the software and documentation are
 * those of the authors and should not be interpreted as representing official
 * policies, either expressed or implied, of the FreeBSD Project.
 *
 *******************************************************************************
 */

#ifndef __TDA998X_H
#define __TDA998X_H

#ifdef __cplusplus
extern "C" {
#endif

/**
 * @addtogroup	NXP_TDA998X
 * @{
 */

#define PAGE_ADDR(__PAGE__, __ADDR__)			(((__PAGE__) << 8) | ((__ADDR__) & 0xFFU))

#define PAGE_OF(__REG__)				(((__REG__) >> 8) & 0xFFU)


#define ENAMODS_FRO_DIS			(1 << 6)
#define ENAMODS_CCLK_DIS		(1 << 5)
#define ENAMODS_RXSENSE_EN		(1 << 2)
#define ENAMODS_HDMI_EN			(1 << 1)
#define ENAMODS_CEC_EN			(1 << 0)

#define BINARY_TEST			(0b01010101)

/**
 * @addtogroup	NXP_TDA998X_CEC_Core
 * @{
 */

/**
 * @brief	CEC Core Registers
 */
enum tda998x_cec_reg {
	INTERRUPTSTATUS = 0xEE,
#define INTERRUPTSTATUS_CEC			(1 << 0)
#define INTERRUPTSTATUS_HDMI			(1 << 1)

	RXSHPDINTENA = 0xFC,
#define RXSHPDINTENA_ena_rxs_int		(1 << 0)
#define RXSHPDINTENA_ena_hpd_int		(1 << 1)


	RXSHPDINT = 0xFD,
#define RXSHPDINT_rxs_int			(1 << 0)
#define RXSHPDINT_hpd_int			(1 << 1)

	RXSHPDLEV = 0xFE,
#define RXSHPDLEV_rxs_level			(1 << 0)
#define RXSHPDLEV_hpd_level			(1 << 1)


	ENAMODS = 0xFF,
#define ENAMODS_ena_cec           (1 << 0)
#define ENAMODS_ena_hdmi			(1 << 1)
#define ENAMODS_ena_rxs           = BINARY(0,0,0,0, 0,1,0,0),
#define ENAMODS_dis_cclk          = BINARY(0,0,1,0, 0,0,0,0),
#define ENAMODS_dis_fro           = BINARY(0,1,0,0, 0,0,0,0),

	FRO_IM_CLK_CTRL = 0xFB,
#define FRO_IM_CLK_CTRL_fro_div			(1 << 0)
#define FRO_IM_CLK_CTRL_imclk_sel		(1 << 1)
#define FRO_IM_CLK_CTRL_ena_otp			(1 << 6)
#define FRO_IM_CLK_CTRL_ghost_dis		(1 << 7)
};

/**
 * @}
 */


//enum _ePage
//{
//    PAGE_00      = 0,
//    E_PAGE_01      = 1,
//    E_PAGE_02      = 2,
//    E_PAGE_09      = 3,
//    E_PAGE_10      = 4,
//    E_PAGE_11      = 5,
//    E_PAGE_12      = 6,
//    E_PAGE_13      = 7,

/**
 * @addtogroup	NXP_TDA998X_HDMI_Core
 * @{
 */

/**
 * @brief	HDMI Core Register Pages
 */
enum tda998x_hdmi_page {
	PAGE_00 = 0x00,
	PAGE_02 = 0x02,
	PAGE_12 = 0x12,
	PAGE_INVALID = 0xFF
};

/**
 * @brief	HDMI Core Registers
 */
enum tda998x_hdmi_reg {
	VERSION			= PAGE_ADDR(PAGE_00, 0x00),
#define VERSION_NOT_S		(1 << 4)
#define VERSION_NOT_H		(1 << 5)

	MAIN_CNTRL0		= PAGE_ADDR(PAGE_00, 0x01),
#define MAIN_CNTRL0_scaler        = BINARY(1,0,0,0, 0,0,0,0),
#define MAIN_CNTRL0_cehs          = BINARY(0,0,0,1, 0,0,0,0),
#define MAIN_CNTRL0_cecs          = BINARY(0,0,0,0, 1,0,0,0),
#define MAIN_CNTRL0_dehs          = BINARY(0,0,0,0, 0,1,0,0),
#define MAIN_CNTRL0_decs         (1 << 1)
#define MAIN_CNTRL0_sr            (1 << 0)

//    VERSION_MSB_RW         =             , PAGE_00, 0x02),
//    PACKAGE_TYPE_R         =             , PAGE_00, 0x03),
//    SR_REG_W               =             , PAGE_00, 0x0A),
//        E_MASKREG_P00_SR_REG_sr_i2c_ms         (1 << 1)
//		    E_MASKREG_P00_SR_REG_sr_audio           (1 << 0)

	DDC_DISABLE		= PAGE_ADDR(PAGE_00, 0x0B),
#define DDC_DISABLE_ddc_dis       (1 << 0)

//
//    CCLK_ON_RW             =             , PAGE_00, 0x0C),
//        E_MASKREG_P00_CCLK_ON_cclk_ddc_on       (1 << 0)

//
//    I2C_MASTER_RW          =             , PAGE_00, 0x0D),
//        E_MASKREG_P00_I2C_MASTER_app_strt_lat    = BINARY(0,0,0,0, 0,1,0,0),
//		    E_MASKREG_P00_I2C_MASTER_dis_filt       (1 << 1)
//  		  E_MASKREG_P00_I2C_MASTER_dis_mm          (1 << 0)
//
//#ifdef TMFL_HDCP_OPTIMIZED_POWER
//    E_REG_FEAT_POWER_DOWN            =             , PAGE_00, 0x0E),
//#endif
//
//    INT_FLAGS_0_RW         = SPA(E_SP00_INT_FLAGS_0 , PAGE_00, 0x0F),
//        E_MASKREG_P00_INT_FLAGS_0_r0            = BINARY(1,0,0,0, 0,0,0,0),
//		    E_MASKREG_P00_INT_FLAGS_0_pj            = BINARY(0,1,0,0, 0,0,0,0),
//		    E_MASKREG_P00_INT_FLAGS_0_sha_1         = BINARY(0,0,1,0, 0,0,0,0),
//		    E_MASKREG_P00_INT_FLAGS_0_bstatus       = BINARY(0,0,0,1, 0,0,0,0),
//		    E_MASKREG_P00_INT_FLAGS_0_bcaps         = BINARY(0,0,0,0, 1,0,0,0),
//		    E_MASKREG_P00_INT_FLAGS_0_t0            = BINARY(0,0,0,0, 0,1,0,0),
//		    /*E_MASKREG_P00_INT_FLAGS_0_hpd          (1 << 1)*/
//		    E_MASKREG_P00_INT_FLAGS_0_encrypt       (1 << 0)
//
//    INT_FLAGS_1_RW         = SPA(E_SP00_INT_FLAGS_1 , PAGE_00, 0x10),
//        /*E_MASKREG_P00_INT_FLAGS_1_hpd_in        = BINARY(1,0,0,0, 0,0,0,0),*/
//		    E_MASKREG_P00_INT_FLAGS_1_sw_int        = BINARY(0,1,0,0, 0,0,0,0),
//		    E_MASKREG_P00_INT_FLAGS_1_sc_deil       = BINARY(0,0,1,0, 0,0,0,0),
//		    E_MASKREG_P00_INT_FLAGS_1_sc_vid        = BINARY(0,0,0,1, 0,0,0,0),
//		    E_MASKREG_P00_INT_FLAGS_1_sc_out        = BINARY(0,0,0,0, 1,0,0,0),
//		    E_MASKREG_P00_INT_FLAGS_1_sc_in         = BINARY(0,0,0,0, 0,1,0,0),
//		    E_MASKREG_P00_INT_FLAGS_1_otp          (1 << 1)
//		    E_MASKREG_P00_INT_FLAGS_1_vs_rpt        (1 << 0)
//
//    INT_FLAGS_2_RW         = SPA(E_SP00_INT_FLAGS_2 , PAGE_00, 0x11),
//        /*E_MASKREG_P00_INT_FLAGS_2_rx_sense      (1 << 0)*/
//		    E_MASKREG_P00_INT_FLAGS_2_edid_blk_rd  (1 << 1)
//
//    /*INT_FLAGS_3_R          =             , PAGE_00, 0x12),*/
//		    /*E_MASKREG_P00_INT_FLAGS_3_rxs_fil       (1 << 0)*/
//
//    SW_INT_W               =             , PAGE_00, 0x15),
//        E_MASKREG_P00_SW_INT_sw_int             (1 << 0)
//
//    ENA_ACLK_RW            =             , PAGE_00, 0x16),
//        E_MASKREG_P00_ENA_ACLK_ena_aclk         (1 << 0)
//		    E_MASKREG_P00_GND_ACLK_gnd_aclk         (1 << 0)
//
//    ENA_VP_0_RW            =             , PAGE_00, 0x18),
//        E_MASKREG_P00_ENA_VP_0_ena_vp7          = BINARY(1,0,0,0, 0,0,0,0),
//		    E_MASKREG_P00_ENA_VP_0_ena_vp6          = BINARY(0,1,0,0, 0,0,0,0),
//		    E_MASKREG_P00_ENA_VP_0_ena_vp5          = BINARY(0,0,1,0, 0,0,0,0),
//		    E_MASKREG_P00_ENA_VP_0_ena_vp4          = BINARY(0,0,0,1, 0,0,0,0),
//		    E_MASKREG_P00_ENA_VP_0_ena_vp3          = BINARY(0,0,0,0, 1,0,0,0),
//		    E_MASKREG_P00_ENA_VP_0_ena_vp2          = BINARY(0,0,0,0, 0,1,0,0),
//		    E_MASKREG_P00_ENA_VP_0_ena_vp1         (1 << 1)
//		    E_MASKREG_P00_ENA_VP_0_ena_vp0          (1 << 0)
//
//    ENA_VP_1_RW            =             , PAGE_00, 0x19),
//        E_MASKREG_P00_ENA_VP_1_ena_vp15         = BINARY(1,0,0,0, 0,0,0,0),
//	    	E_MASKREG_P00_ENA_VP_1_ena_vp14         = BINARY(0,1,0,0, 0,0,0,0),
//		    E_MASKREG_P00_ENA_VP_1_ena_vp13         = BINARY(0,0,1,0, 0,0,0,0),
//		    E_MASKREG_P00_ENA_VP_1_ena_vp12         = BINARY(0,0,0,1, 0,0,0,0),
//		    E_MASKREG_P00_ENA_VP_1_ena_vp11         = BINARY(0,0,0,0, 1,0,0,0),
//		    E_MASKREG_P00_ENA_VP_1_ena_vp10         = BINARY(0,0,0,0, 0,1,0,0),
//		    E_MASKREG_P00_ENA_VP_1_ena_vp9         (1 << 1)
//		    E_MASKREG_P00_ENA_VP_1_ena_vp8          (1 << 0)
//
//    ENA_VP_2_RW            =             , PAGE_00, 0x1A),
//        E_MASKREG_P00_ENA_VP_2_ena_vp23         = BINARY(1,0,0,0, 0,0,0,0),
//	    	E_MASKREG_P00_ENA_VP_2_ena_vp22         = BINARY(0,1,0,0, 0,0,0,0),
//	    	E_MASKREG_P00_ENA_VP_2_ena_vp21         = BINARY(0,0,1,0, 0,0,0,0),
//	    	E_MASKREG_P00_ENA_VP_2_ena_vp20         = BINARY(0,0,0,1, 0,0,0,0),
//	    	E_MASKREG_P00_ENA_VP_2_ena_vp19         = BINARY(0,0,0,0, 1,0,0,0),
//		    E_MASKREG_P00_ENA_VP_2_ena_vp18         = BINARY(0,0,0,0, 0,1,0,0),
//  	  	E_MASKREG_P00_ENA_VP_2_ena_vp17        (1 << 1)
// 	  		E_MASKREG_P00_ENA_VP_2_ena_vp16         (1 << 0)
//
//    ENA_AP_RW              =             , PAGE_00, 0x1E),
//      	E_MASKREG_P00_ENA_AP_ena_ap7            = BINARY(1,0,0,0, 0,0,0,0),
//	    	E_MASKREG_P00_ENA_AP_ena_ap6            = BINARY(0,1,0,0, 0,0,0,0),
//	    	E_MASKREG_P00_ENA_AP_ena_ap5            = BINARY(0,0,1,0, 0,0,0,0),
//	    	E_MASKREG_P00_ENA_AP_ena_ap4            = BINARY(0,0,0,1, 0,0,0,0),
//		    E_MASKREG_P00_ENA_AP_ena_ap3            = BINARY(0,0,0,0, 1,0,0,0),
// 			  E_MASKREG_P00_ENA_AP_ena_ap2            = BINARY(0,0,0,0, 0,1,0,0),
// 		  	E_MASKREG_P00_ENA_AP_ena_ap1           (1 << 1)
// 	  		E_MASKREG_P00_ENA_AP_ena_ap0            (1 << 0)
//
//    VIP_CNTRL_0_W          = SPA(E_SP00_VIP_CNTRL_0 , PAGE_00, 0x20),
//        E_MASKREG_P00_VIP_CNTRL_0_mirr_a        = BINARY(1,0,0,0, 0,0,0,0),
//		    E_MASKREG_P00_VIP_CNTRL_0_swap_a        = BINARY(0,1,1,1, 0,0,0,0),
//		    E_MASKREG_P00_VIP_CNTRL_0_mirr_b        = BINARY(0,0,0,0, 1,0,0,0),
//		    E_MASKREG_P00_VIP_CNTRL_0_swap_b        = BINARY(0,0,0,0, 0,1,1,1),
//
//    VIP_CNTRL_1_W          = SPA(E_SP00_VIP_CNTRL_1 , PAGE_00, 0x21),
//        E_MASKREG_P00_VIP_CNTRL_1_mirr_c        = BINARY(1,0,0,0, 0,0,0,0),
//  		  E_MASKREG_P00_VIP_CNTRL_1_swap_c        = BINARY(0,1,1,1, 0,0,0,0),
//  		  E_MASKREG_P00_VIP_CNTRL_1_mirr_d        = BINARY(0,0,0,0, 1,0,0,0),
//		    E_MASKREG_P00_VIP_CNTRL_1_swap_d        = BINARY(0,0,0,0, 0,1,1,1),
//
//    VIP_CNTRL_2_W          = SPA(E_SP00_VIP_CNTRL_2 , PAGE_00, 0x22),
//        E_MASKREG_P00_VIP_CNTRL_2_mirr_e        = BINARY(1,0,0,0, 0,0,0,0),
//		    E_MASKREG_P00_VIP_CNTRL_2_swap_e        = BINARY(0,1,1,1, 0,0,0,0),
//  		  E_MASKREG_P00_VIP_CNTRL_2_mirr_f        = BINARY(0,0,0,0, 1,0,0,0),
//    		E_MASKREG_P00_VIP_CNTRL_2_swap_f        = BINARY(0,0,0,0, 0,1,1,1),
//
//    VIP_CNTRL_3_W          = SPA(E_SP00_VIP_CNTRL_3 , PAGE_00, 0x23),
//        E_MASKREG_P00_VIP_CNTRL_3_edge          = BINARY(1,0,0,0, 0,0,0,0),
//		    E_MASKREG_P00_VIP_CNTRL_3_de_int        = BINARY(0,1,0,0, 0,0,0,0),
//  		  E_MASKREG_P00_VIP_CNTRL_3_sp_sync       = BINARY(0,0,1,1, 0,0,0,0),
//    		E_MASKREG_P00_VIP_CNTRL_3_emb           = BINARY(0,0,0,0, 1,0,0,0),
//    		E_MASKREG_P00_VIP_CNTRL_3_v_tgl         = BINARY(0,0,0,0, 0,1,0,0),
//    		E_MASKREG_P00_VIP_CNTRL_3_h_tgl        (1 << 1)
//    		E_MASKREG_P00_VIP_CNTRL_3_x_tgl         (1 << 0)

	VIP_CNTRL_4		= PAGE_ADDR(PAGE_00, 0x24),
#define VIP_CNTRL_4_tst_pat       = BINARY(1,0,0,0, 0,0,0,0),
#define VIP_CNTRL_4_tst_656       = BINARY(0,1,0,0, 0,0,0,0),
#define VIP_CNTRL_4_656_alt       = BINARY(0,0,1,0, 0,0,0,0),
#define VIP_CNTRL_4_ccir656       = BINARY(0,0,0,1, 0,0,0,0),
#define VIP_CNTRL_4_blankit       = BINARY(0,0,0,0, 1,1,0,0),
#define VIP_CNTRL_4_blc           = BINARY(0,0,0,0, 0,0,1,1),



	//
	//    VIP_CNTRL_5_W          = SPA(E_SP00_VIP_CNTRL_5 , PAGE_00, 0x25),
	//        E_MASKREG_P00_VIP_CNTRL_5_sp_cnt        = BINARY(0,0,0,0, 0,1,1,0),
	//		    E_MASKREG_P00_VIP_CNTRL_5_ckcase        (1 << 0)
	//
	//    MUX_AP_RW              =             , PAGE_00, 0x26),
	//    MUX_VP_VIP_OUT_RW      =             , PAGE_00, 0x27),
	//    MAT_CONTRL_W           = SPA(E_SP00_MAT_CONTRL  , PAGE_00, 0x80),
	//        E_MASKREG_P00_MAT_CONTRL_mat_bp         = BINARY(0,0,0,0, 0,1,0,0),
	//		    E_MASKREG_P00_MAT_CONTRL_mat_sc         = BINARY(0,0,0,0, 0,0,1,1),
	//
	//    MAT_OI1_MSB_W          =             , PAGE_00, 0x81),
	//    MAT_OI1_LSB_W          =             , PAGE_00, 0x82),
	//    MAT_OI2_MSB_W          =             , PAGE_00, 0x83),
	//    MAT_OI2_LSB_W          =             , PAGE_00, 0x84),
	//    MAT_OI3_MSB_W          =             , PAGE_00, 0x85),
	//    MAT_OI3_LSB_W          =             , PAGE_00, 0x86),
	//    MAT_P11_MSB_W          =             , PAGE_00, 0x87),
	//    MAT_P11_LSB_W          =             , PAGE_00, 0x88),
	//    MAT_P12_MSB_W          =             , PAGE_00, 0x89),
	//    MAT_P12_LSB_W          =             , PAGE_00, 0x8A),
	//    MAT_P13_MSB_W          =             , PAGE_00, 0x8B),
	//    MAT_P13_LSB_W          =             , PAGE_00, 0x8C),
	//    MAT_P21_MSB_W          =             , PAGE_00, 0x8D),
	//    MAT_P21_LSB_W          =             , PAGE_00, 0x8E),
	//    MAT_P22_MSB_W          =             , PAGE_00, 0x8F),
	//    MAT_P22_LSB_W          =             , PAGE_00, 0x90),
	//    MAT_P23_MSB_W          =             , PAGE_00, 0x91),
	//    MAT_P23_LSB_W          =             , PAGE_00, 0x92),
	//    MAT_P31_MSB_W          =             , PAGE_00, 0x93),
	//    MAT_P31_LSB_W          =             , PAGE_00, 0x94),
	//    MAT_P32_MSB_W          =             , PAGE_00, 0x95),
	//    MAT_P32_LSB_W          =             , PAGE_00, 0x96),
	//    MAT_P33_MSB_W          =             , PAGE_00, 0x97),
	//    MAT_P33_LSB_W          =             , PAGE_00, 0x98),
	//    MAT_OO1_MSB_W          =             , PAGE_00, 0x99),
	//    MAT_OO1_LSB_W          =             , PAGE_00, 0x9A),
	//    MAT_OO2_MSB_W          =             , PAGE_00, 0x9B),
	//    MAT_OO2_LSB_W          =             , PAGE_00, 0x9C),
	//    MAT_OO3_MSB_W          =             , PAGE_00, 0x9D),
	//    MAT_OO3_LSB_W          =             , PAGE_00, 0x9E),
	//    VIDFORMAT_W            =             , PAGE_00, 0xA0),
	//#ifdef TMFL_TDA19989
	//    		E_MASKREG_P00_VIDFORMAT_3d              = BINARY(1,0,0,0, 0,0,0,0),
	//    		E_MASKREG_P00_VIDFORMAT_3d_neg_vs       = BINARY(0,1,0,0, 0,0,0,0),
	//#endif
	//		    E_MASKREG_P00_VIDFORMAT_vidformat       = BINARY(0,0,0,1, 1,1,1,1),
	//
	//    REFPIX_MSB_W           =             , PAGE_00, 0xA1),
	//    REFPIX_LSB_W           =             , PAGE_00, 0xA2),
	//    REFLINE_MSB_W          =             , PAGE_00, 0xA3),
	//    REFLINE_LSB_W          =             , PAGE_00, 0xA4),
	//    NPIX_MSB_W             =             , PAGE_00, 0xA5),
	//    NPIX_LSB_W             =             , PAGE_00, 0xA6),
	//    NLINE_MSB_W            =             , PAGE_00, 0xA7),
	//    NLINE_LSB_W            =             , PAGE_00, 0xA8),
	//    VS_LINE_STRT_1_MSB_W   =             , PAGE_00, 0xA9),
	//    VS_LINE_STRT_1_LSB_W   =             , PAGE_00, 0xAA),
	//    VS_PIX_STRT_1_MSB_W    =             , PAGE_00, 0xAB),
	//    VS_PIX_STRT_1_LSB_W    =             , PAGE_00, 0xAC),
	//    VS_LINE_END_1_MSB_W    =             , PAGE_00, 0xAD),
	//    VS_LINE_END_1_LSB_W    =             , PAGE_00, 0xAE),
	//    VS_PIX_END_1_MSB_W     =             , PAGE_00, 0xAF),
	//    VS_PIX_END_1_LSB_W     =             , PAGE_00, 0xB0),
	//    VS_LINE_STRT_2_MSB_W   =             , PAGE_00, 0xB1),
	//    VS_LINE_STRT_2_LSB_W   =             , PAGE_00, 0xB2),
	//    VS_PIX_STRT_2_MSB_W    =             , PAGE_00, 0xB3),
	//    VS_PIX_STRT_2_LSB_W    =             , PAGE_00, 0xB4),
	//    VS_LINE_END_2_MSB_W    =             , PAGE_00, 0xB5),
	//    VS_LINE_END_2_LSB_W    =             , PAGE_00, 0xB6),
	//    VS_PIX_END_2_MSB_W     =             , PAGE_00, 0xB7),
	//    VS_PIX_END_2_LSB_W     =             , PAGE_00, 0xB8),
	//    HS_PIX_START_MSB_W     =             , PAGE_00, 0xB9),
	//    HS_PIX_START_LSB_W     =             , PAGE_00, 0xBA),
	//    HS_PIX_STOP_MSB_W      =             , PAGE_00, 0xBB),
	//    HS_PIX_STOP_LSB_W      =             , PAGE_00, 0xBC),
	//    VWIN_START_1_MSB_W     =             , PAGE_00, 0xBD),
	//    VWIN_START_1_LSB_W     =             , PAGE_00, 0xBE),
	//    VWIN_END_1_MSB_W       =             , PAGE_00, 0xBF),
	//    VWIN_END_1_LSB_W       =             , PAGE_00, 0xC0),
	//    VWIN_START_2_MSB_W     =             , PAGE_00, 0xC1),
	//    VWIN_START_2_LSB_W     =             , PAGE_00, 0xC2),
	//    VWIN_END_2_MSB_W       =             , PAGE_00, 0xC3),
	//    VWIN_END_2_LSB_W       =             , PAGE_00, 0xC4),
	//    DE_START_MSB_W         =             , PAGE_00, 0xC5),
	//    DE_START_LSB_W         =             , PAGE_00, 0xC6),
	//    DE_STOP_MSB_W          =             , PAGE_00, 0xC7),
	//    DE_STOP_LSB_W          =             , PAGE_00, 0xC8),
	//    COLBAR_WIDTH_W         =             , PAGE_00, 0xC9),
	//    TBG_CNTRL_0_W          = SPA(E_SP00_TBG_CNTRL_0 , PAGE_00, 0xCA),
	//        E_MASKREG_P00_TBG_CNTRL_0_sync_once     = BINARY(1,0,0,0, 0,0,0,0),
	//		    E_MASKREG_P00_TBG_CNTRL_0_sync_mthd     = BINARY(0,1,0,0, 0,0,0,0),
	//		    E_MASKREG_P00_TBG_CNTRL_0_frame_dis     = BINARY(0,0,1,0, 0,0,0,0),
	//
	//    TBG_CNTRL_1_W          = SPA(E_SP00_TBG_CNTRL_1 , PAGE_00, 0xCB),
	//        E_MASKREG_P00_TBG_CNTRL_1_dwin_dis      = BINARY(0,1,0,0, 0,0,0,0),
	//		    E_MASKREG_P00_TBG_CNTRL_1_vhx_ext       = BINARY(0,0,1,1, 1,0,0,0),
	//		    E_MASKREG_P00_TBG_CNTRL_1_vhx_ext_vs    = BINARY(0,0,1,0, 0,0,0,0),
	//		    E_MASKREG_P00_TBG_CNTRL_1_vhx_ext_hs    = BINARY(0,0,0,1, 0,0,0,0),
	//		    E_MASKREG_P00_TBG_CNTRL_1_vhx_ext_de    = BINARY(0,0,0,0, 1,0,0,0),
	//		    E_MASKREG_P00_TBG_CNTRL_1_vh_tgl        = BINARY(0,0,0,0, 0,1,1,1),
	//		    E_MASKREG_P00_TBG_CNTRL_1_vh_tgl_2      = BINARY(0,0,0,0, 0,1,0,0),
	//		    E_MASKREG_P00_TBG_CNTRL_1_vh_tgl_1     (1 << 1)
	//		    E_MASKREG_P00_TBG_CNTRL_1_vh_tgl_0      (1 << 0)
	//
	//    VBL_OFFSET_START_W     =             , PAGE_00, 0xCC),
	//    VBL_OFFSET_END_W       =             , PAGE_00, 0xCD),
	//    HBL_OFFSET_START_W     =             , PAGE_00, 0xCE),
	//    HBL_OFFSET_END_W       =             , PAGE_00, 0xCF),
	//    DWIN_RE_DE_W           =             , PAGE_00, 0xD0),
	//    DWIN_FE_DE_W           =             , PAGE_00, 0xD1),
	//#ifdef TMFL_RGB_DDR_12BITS
	//    VSPACE_START_MSB_W     =             , PAGE_00, 0xD2),
	//    VSPACE_START_LSB_W     =             , PAGE_00, 0xD3),
	//    VSPACE_END_MSB_W       =             , PAGE_00, 0xD4),
	//    VSPACE_END_LSB_W       =             , PAGE_00, 0xD5),
	//    ENABLE_SPACE_W         =             , PAGE_00, 0xD6),
	//    VSPACE_Y_DATA_W        =             , PAGE_00, 0xD7),
	//    VSPACE_U_DATA_W        =             , PAGE_00, 0xD8),
	//    VSPACE_V_DATA_W        =             , PAGE_00, 0xD9),
	//#endif
	//
	//    TIMER_RI_PJ_RW         =             , PAGE_00, 0xE1),
	//        E_MASKREG_P00_I2C_TIMER_RI              = BINARY(0,0,0,0, 1,1,1,1),
	//		    E_MASKREG_P00_I2C_TIMER_PJ              = BINARY(1,1,1,1, 0,0,0,0),
	//
	//    BCAPS_POLL_RW          =             , PAGE_00, 0xE2),
	//    100us_RW               =             , PAGE_00, 0xE3),
	//
	//    HVF_CNTRL_0_W          = SPA(E_SP00_HVF_CNTRL_0 , PAGE_00, 0xE4),
	//        E_MASKREG_P00_HVF_CNTRL_0_sm            = BINARY(1,0,0,0, 0,0,0,0),
	//		    E_MASKREG_P00_HVF_CNTRL_0_rwb           = BINARY(0,1,0,0, 0,0,0,0),
	//  		  E_MASKREG_P00_HVF_CNTRL_0_prefil        = BINARY(0,0,0,0, 1,1,0,0),
	//    		E_MASKREG_P00_HVF_CNTRL_0_intpol        = BINARY(0,0,0,0, 0,0,1,1),
	//
	//    HVF_CNTRL_1_W          = SPA(E_SP00_HVF_CNTRL_1 , PAGE_00, 0xE5),
	//        E_MASKREG_P00_HVF_CNTRL_1_semi_planar   = BINARY(0,1,0,0, 0,0,0,0),
	//    		E_MASKREG_P00_HVF_CNTRL_1_pad           = BINARY(0,0,1,1, 0,0,0,0),
	//    		E_MASKREG_P00_HVF_CNTRL_1_vqr           = BINARY(0,0,0,0, 1,1,0,0),
	//  		  E_MASKREG_P00_HVF_CNTRL_1_yuvblk       (1 << 1)
	//		    E_MASKREG_P00_HVF_CNTRL_1_for           (1 << 0)
	//
	//    TIMER_H_W              = SPA(E_SP00_TIMER_H     , PAGE_00, 0xE8),
	//        E_MASKREG_P00_TIMER_H_wd_clksel         = BINARY(0,1,0,0, 0,0,0,0),
	//		    E_MASKREG_P00_TIMER_H_tim_h             = BINARY(0,0,0,0, 0,0,1,1),
	//
	//    TIMER_M_W              =             , PAGE_00, 0xE9),
	//    TIMER_L_W              =             , PAGE_00, 0xEA),
	//    TIMER_2SEC_W           =             , PAGE_00, 0xEB),
	//    TIMER_5SEC_W           =             , PAGE_00, 0xEC),
	//    NDIV_IM_W              =             , PAGE_00, 0xEE),
	//    NDIV_PF_W              =             , PAGE_00, 0xEF),
	//    RPT_CNTRL_W            =             , PAGE_00, 0xF0),
	//    LEAD_OFF_W             =             , PAGE_00, 0xF1),
	//    TRAIL_OFF_W            =             , PAGE_00, 0xF2),
	//    MISR_EXP_0_RW          =             , PAGE_00, 0xF3),
	//    MISR_EXP_1_RW          =             , PAGE_00, 0xF4),
	//    MISR_EXP_2_RW          =             , PAGE_00, 0xF5),
	//    MISR_0_R               =             , PAGE_00, 0xF6),
	//    MISR_1_R               =             , PAGE_00, 0xF7),
	//    DEBUG_PROBE_W          = SPA(E_SP00_DEBUG_PROBE , PAGE_00, 0xF8),
	//        E_MASKREG_P00_DEBUG_PROBE_sel           = BINARY(0,0,1,1, 0,0,0,0),
	//		    E_MASKREG_P00_DEBUG_PROBE_bypass        = BINARY(0,0,0,0, 1,0,0,0),
	//  		  E_MASKREG_P00_DEBUG_PROBE_vid_de        = BINARY(0,0,0,0, 0,1,0,0),
	//		    E_MASKREG_P00_DEBUG_PROBE_di_de        (1 << 1)
	//  		  E_MASKREG_P00_DEBUG_PROBE_woo_en        (1 << 0)
	//
	//    GHOST_XADDR_W          =             , PAGE_00, 0xF9),
	//    MISR_2_R               =             , PAGE_00, 0xFA),
	//    I2S_FORMAT_RW          =             , PAGE_00, 0xFC),
	//		    E_MASKREG_P00_I2S_FORMAT_i2s_format     = BINARY(0,0,0,0, 1,1,1,1),
	//		    //E_MASKREG_P00_I2S_FORMAT_i2s_data_size  = BINARY(0,0,0,0, 1,1,0,0),
	//
	//    AIP_CLKSEL_W           = SPA(E_SP00_AIP_CLKSEL  , PAGE_00, 0xFD),
	//        E_MASKREG_P00_AIP_CLKSEL_dst_rate       = BINARY(0,1,0,0, 0,0,0,0),
	//    		E_MASKREG_P00_AIP_CLKSEL_sel_aip_SHIFT  = 3,
	//    		E_MASKREG_P00_AIP_CLKSEL_sel_aip        = BINARY(0,0,1,1, 1,0,0,0),
	//  		  E_MASKREG_P00_AIP_CLKSEL_sel_pol_clk    = BINARY(0,0,0,0, 0,1,0,0),
	//		    E_MASKREG_P00_AIP_CLKSEL_sel_fs         = BINARY(0,0,0,0, 0,0,1,1),
	//
	//    GHOST_ADDR_W           =             , PAGE_00, 0xFE),
	//    SC_VIDFORMAT_W         = SPA(E_SP01_SC_VIDFORMAT, E_PAGE_01, 0x00),
	//        E_MASKREG_P01_SC_VIDFORMAT_lut_sel      = BINARY(1,1,0,0, 0,0,0,0),
	//		    E_MASKREG_P01_SC_VIDFORMAT_vid_format_o = BINARY(0,0,1,1, 1,0,0,0),
	//  		  E_MASKREG_P01_SC_VIDFORMAT_vid_format_i = BINARY(0,0,0,0, 0,1,1,1),
	//
	//    SC_CNTRL_W             = SPA(E_SP01_SC_CNTRL    , E_PAGE_01, 0x01),
	//        E_MASKREG_P01_SC_CNTRL_phases_h         = BINARY(0,0,0,1, 0,0,0,0),
	//    		E_MASKREG_P01_SC_CNTRL_il_out_on        = BINARY(0,0,0,0, 1,0,0,0),
	//    		E_MASKREG_P01_SC_CNTRL_phases_v         = BINARY(0,0,0,0, 0,1,0,0),
	//  		  E_MASKREG_P01_SC_CNTRL_vs_on           (1 << 1)
	//		    E_MASKREG_P01_SC_CNTRL_deil_on          (1 << 0)
	//
	//    SC_DELTA_PHASE_V_W     =             , E_PAGE_01, 0x02),
	//    SC_DELTA_PHASE_H_W     =             , E_PAGE_01, 0x03),
	//    SC_START_PHASE_H_W     =             , E_PAGE_01, 0x04),
	//    SC_NPIX_IN_LSB_W       =             , E_PAGE_01, 0x05),
	//    SC_NPIX_IN_MSB_W       =             , E_PAGE_01, 0x06),
	//    SC_NPIX_OUT_LSB_W      =             , E_PAGE_01, 0x07),
	//    SC_NPIX_OUT_MSB_W      =             , E_PAGE_01, 0x08),
	//    SC_NLINE_IN_LSB_W      =             , E_PAGE_01, 0x09),
	//    SC_NLINE_IN_MSB_W      =             , E_PAGE_01, 0x0A),
	//    SC_NLINE_OUT_LSB_W     =             , E_PAGE_01, 0x0B),
	//    SC_NLINE_OUT_MSB_W     =             , E_PAGE_01, 0x0C),
	//    SC_NLINE_SKIP_W        =             , E_PAGE_01, 0x0D),
	//    SC_SAMPLE_BUFFILL_R    =             , E_PAGE_01, 0x0E),
	//    SC_MAX_BUFFILL_P_0_R   =             , E_PAGE_01, 0x0F),
	//    SC_MAX_BUFFILL_P_1_R   =             , E_PAGE_01, 0x10),
	//    SC_MAX_BUFFILL_D_0_R   =             , E_PAGE_01, 0x11),
	//    SC_MAX_BUFFILL_D_1_R   =             , E_PAGE_01, 0x12),
	//    SC_SAMPLE_FIFOFILL_R   =             , E_PAGE_01, 0x13),
	//    SC_MAX_FIFOFILL_PI_R   =             , E_PAGE_01, 0x14),
	//    SC_MIN_FIFOFILL_PO1_R  =             , E_PAGE_01, 0x15),
	//    SC_MIN_FIFOFILL_PO2_R  =             , E_PAGE_01, 0x16),
	//    SC_MIN_FIFOFILL_PO3_R  =             , E_PAGE_01, 0x17),
	//    SC_MIN_FIFOFILL_PO4_R  =             , E_PAGE_01, 0x18),
	//    SC_MAX_FIFOFILL_DI_R   =             , E_PAGE_01, 0x19),
	//    SC_MAX_FIFOFILL_DO_R   =             , E_PAGE_01, 0x1A),
	//    SC_VS_LUT_0_W          =             , E_PAGE_01, 0x1B),
	//    SC_VS_LUT_1_W          =             , E_PAGE_01, 0x1C),
	//    SC_VS_LUT_2_W          =             , E_PAGE_01, 0x1D),
	//    SC_VS_LUT_3_W          =             , E_PAGE_01, 0x1E),
	//    SC_VS_LUT_4_W          =             , E_PAGE_01, 0x1F),
	//    SC_VS_LUT_5_W          =             , E_PAGE_01, 0x20),
	//    SC_VS_LUT_6_W          =             , E_PAGE_01, 0x21),
	//    SC_VS_LUT_7_W          =             , E_PAGE_01, 0x22),
	//    SC_VS_LUT_8_W          =             , E_PAGE_01, 0x23),
	//    SC_VS_LUT_9_W          =             , E_PAGE_01, 0x24),
	//    SC_VS_LUT_10_W         =             , E_PAGE_01, 0x25),
	//    SC_VS_LUT_11_W         =             , E_PAGE_01, 0x26),
	//    SC_VS_LUT_12_W         =             , E_PAGE_01, 0x27),
	//    SC_VS_LUT_13_W         =             , E_PAGE_01, 0x28),
	//    SC_VS_LUT_14_W         =             , E_PAGE_01, 0x29),
	//    SC_VS_LUT_15_W         =             , E_PAGE_01, 0x2A),
	//    SC_VS_LUT_16_W         =             , E_PAGE_01, 0x2B),
	//    SC_VS_LUT_17_W         =             , E_PAGE_01, 0x2C),
	//    SC_VS_LUT_18_W         =             , E_PAGE_01, 0x2D),
	//    SC_VS_LUT_19_W         =             , E_PAGE_01, 0x2E),
	//    SC_VS_LUT_20_W         =             , E_PAGE_01, 0x2F),
	//    SC_VS_LUT_21_W         =             , E_PAGE_01, 0x30),
	//    SC_VS_LUT_22_W         =             , E_PAGE_01, 0x31),
	//    SC_VS_LUT_23_W         =             , E_PAGE_01, 0x32),
	//    SC_VS_LUT_24_W         =             , E_PAGE_01, 0x33),
	//    SC_VS_LUT_25_W         =             , E_PAGE_01, 0x34),
	//    SC_VS_LUT_26_W         =             , E_PAGE_01, 0x35),
	//    SC_VS_LUT_27_W         =             , E_PAGE_01, 0x36),
	//    SC_VS_LUT_28_W         =             , E_PAGE_01, 0x37),
	//    SC_VS_LUT_29_W         =             , E_PAGE_01, 0x38),
	//    SC_VS_LUT_30_W         =             , E_PAGE_01, 0x39),
	//    SC_VS_LUT_31_W         =             , E_PAGE_01, 0x3A),
	//    SC_VS_LUT_32_W         =             , E_PAGE_01, 0x3B),
	//    SC_VS_LUT_33_W         =             , E_PAGE_01, 0x3C),
	//    SC_VS_LUT_34_W         =             , E_PAGE_01, 0x3D),
	//    SC_VS_LUT_35_W         =             , E_PAGE_01, 0x3E),
	//    SC_VS_LUT_36_W         =             , E_PAGE_01, 0x3F),
	//    SC_VS_LUT_37_W         =             , E_PAGE_01, 0x40),
	//    SC_VS_LUT_38_W         =             , E_PAGE_01, 0x41),
	//    SC_VS_LUT_39_W         =             , E_PAGE_01, 0x42),
	//    SC_VS_LUT_40_W         =             , E_PAGE_01, 0x43),
	//    SC_VS_LUT_41_W         =             , E_PAGE_01, 0x44),
	//    SC_VS_LUT_42_W         =             , E_PAGE_01, 0x45),
	//    SC_VS_LUT_43_W         =             , E_PAGE_01, 0x46),
	//    SC_VS_LUT_44_W         =             , E_PAGE_01, 0x47),
	//    SC_LAT_SCO_RW          =             , E_PAGE_01, 0x48),
	//    VIDFORMAT_W            =             , E_PAGE_01, 0xA0),
	//		    E_MASKREG_P01_VIDFORMAT_vidformat       = BINARY(0,0,0,0, 0,1,1,1),
	//
	//    REFPIX_MSB_W           =             , E_PAGE_01, 0xA1),
	//    REFPIX_LSB_W           =             , E_PAGE_01, 0xA2),
	//    REFLINE_MSB_W          =             , E_PAGE_01, 0xA3),
	//    REFLINE_LSB_W          =             , E_PAGE_01, 0xA4),
	//    NPIX_MSB_W             =             , E_PAGE_01, 0xA5),
	//    NPIX_LSB_W             =             , E_PAGE_01, 0xA6),
	//    NLINE_MSB_W            =             , E_PAGE_01, 0xA7),
	//    NLINE_LSB_W            =             , E_PAGE_01, 0xA8),
	//    VWIN_START_1_MSB_W     =             , E_PAGE_01, 0xBD),
	//    VWIN_START_1_LSB_W     =             , E_PAGE_01, 0xBE),
	//    VWIN_END_1_MSB_W       =             , E_PAGE_01, 0xBF),
	//    VWIN_END_1_LSB_W       =             , E_PAGE_01, 0xC0),
	//    VWIN_START_2_MSB_W     =             , E_PAGE_01, 0xC1),
	//    VWIN_START_2_LSB_W     =             , E_PAGE_01, 0xC2),
	//    VWIN_END_2_MSB_W       =             , E_PAGE_01, 0xC3),
	//    VWIN_END_2_LSB_W       =             , E_PAGE_01, 0xC4),
	//    DE_START_MSB_W         =             , E_PAGE_01, 0xC5),
	//    DE_START_LSB_W         =             , E_PAGE_01, 0xC6),
	//    DE_STOP_MSB_W          =             , E_PAGE_01, 0xC7),
	//    DE_STOP_LSB_W          =             , E_PAGE_01, 0xC8),
	//    TBG_CNTRL_0_W          = SPA(E_SP01_TBG_CNTRL_0 , E_PAGE_01, 0xCA),
	//        E_MASKREG_P01_TBG_CNTRL_0_sync_once     = BINARY(1,0,0,0, 0,0,0,0),
	//    		E_MASKREG_P01_TBG_CNTRL_0_sync_mthd     = BINARY(0,1,0,0, 0,0,0,0),
	//   			E_MASKREG_P01_TBG_CNTRL_0_frame_dis     = BINARY(0,0,1,0, 0,0,0,0),
	//   			E_MASKREG_P01_TBG_CNTRL_0_top_ext       = BINARY(0,0,0,0, 1,0,0,0),
	//    		E_MASKREG_P01_TBG_CNTRL_0_de_ext        = BINARY(0,0,0,0, 0,1,0,0),
	//  		  E_MASKREG_P01_TBG_CNTRL_0_top_sel      (1 << 1)
	//		    E_MASKREG_P01_TBG_CNTRL_0_top_tgl       (1 << 0)
	//
	//    PLL_SERIAL_1_RW        =             , E_PAGE_02, 0x00),
	//        E_MASKREG_P02_PLL_SERIAL_1_srl_man_iz   = BINARY(0,1,0,0, 0,0,0,0),
	//  		  E_MASKREG_P02_PLL_SERIAL_1_srl_iz       = BINARY(0,0,0,0, 0,1,1,0),
	//		    E_MASKREG_P02_PLL_SERIAL_1_srl_fdn      (1 << 0)
	//
	//    PLL_SERIAL_2_RW        =             , E_PAGE_02, 0x01),
	//        E_MASKREG_P02_PLL_SERIAL_2_srl_pr       = BINARY(1,1,1,1, 0,0,0,0),
	//		    E_MASKREG_P02_PLL_SERIAL_2_srl_nosc     = BINARY(0,0,0,0, 0,0,1,1),
	//
	//    PLL_SERIAL_3_RW        =             , E_PAGE_02, 0x02),
	//        E_MASKREG_P02_PLL_SERIAL_3_srl_pxin_sel = BINARY(0,0,0,1, 0,0,0,0),
	//  		  E_MASKREG_P02_PLL_SERIAL_3_srl_de      (1 << 1)
	//		    E_MASKREG_P02_PLL_SERIAL_3_srl_ccir     (1 << 0)
	//
	//    SERIALIZER_RW          =             , E_PAGE_02, 0x03),
	//        E_MASKREG_P02_SERIALIZER_srl_phase3     = BINARY(1,1,1,1, 0,0,0,0),
	//		    E_MASKREG_P02_SERIALIZER_srl_phase2     = BINARY(0,0,0,0, 1,1,1,1),
	//
	//    BUFFER_OUT_RW          =             , E_PAGE_02, 0x04),
	//        E_MASKREG_P02_BUFFER_OUT_srl_force      = BINARY(0,0,0,0, 1,1,0,0),
	//		    E_MASKREG_P02_BUFFER_OUT_srl_clk        = BINARY(0,0,0,0, 0,0,1,1),
	//
	//    PLL_SCG1_RW            =             , E_PAGE_02, 0x05),
	//    PLL_SCG2_RW            =             , E_PAGE_02, 0x06),
	//    PLL_SCGN1_RW           =             , E_PAGE_02, 0x07),
	//    PLL_SCGN2_RW           =             , E_PAGE_02, 0x08),
	//    PLL_SCGR1_RW           =             , E_PAGE_02, 0x09),
	//        E_MASKREG_P02_PLL_SCG1_scg_fdn          (1 << 0)
	//
	//    PLL_SCGR2_RW           =             , E_PAGE_02, 0x0A),
	//        E_MASKREG_P02_PLL_SCG2_bypass_scg       = BINARY(1,0,0,0, 0,0,0,0),
	//		    E_MASKREG_P02_PLL_SCG2_selpllclkin      = BINARY(0,0,0,1, 0,0,0,0),
	//		    E_MASKREG_P02_PLL_SCG2_scg_nosc         = BINARY(0,0,0,0, 0,0,1,1),
	//
	//    VAI_PLL_R              =             , E_PAGE_02, 0x0D),
	//        E_MASKREG_P02_VAI_PLL_pllde_hvp         = BINARY(0,1,0,0, 0,0,0,0),
	//		    E_MASKREG_P02_VAI_PLL_pllscg_hvp        = BINARY(0,0,1,0, 0,0,0,0),
	//		    E_MASKREG_P02_VAI_PLL_pllsrl_hvp        = BINARY(0,0,0,1, 0,0,0,0),
	//		    E_MASKREG_P02_VAI_PLL_pllscg_lock      (1 << 1)
	//		    E_MASKREG_P02_VAI_PLL_pllsrl_lock       (1 << 0)
	//
	//    AUDIO_DIV_RW           =             , E_PAGE_02, 0x0E),
	//        E_MASKREG_P02_AUDIO_DIV_audio_div       = BINARY(0,0,0,0, 0,1,1,1),
	//
	//    TEST1_RW               =             , E_PAGE_02, 0x0F),
	//        E_MASKREG_P02_TEST1_srldat              = BINARY(1,1,0,0, 0,0,0,0),
	//		    E_MASKREG_P02_TEST1_tst_nosc           (1 << 1)
	//		    E_MASKREG_P02_TEST1_tst_enahvp          (1 << 0)
	//
	//    /*TEST2_RW               =             , E_PAGE_02, 0x10),*/
	//        //E_MASKREG_P02_TEST2_pwd1v8             (1 << 1)
	//		    //E_MASKREG_P02_TEST2_divtestoe           (1 << 0)
	//    SEL_CLK_RW             =             , E_PAGE_02, 0x11),
	//        E_MASKREG_P02_SEL_CLK_ena_sc_clk        = BINARY(0,0,0,0, 1,0,0,0),
	//		    E_MASKREG_P02_SEL_CLK_sel_vrf_clk       = BINARY(0,0,0,0, 0,1,1,0),
	//		    E_MASKREG_P02_SEL_CLK_sel_clk1          (1 << 0)
	//


	ANA_GENERAL		= PAGE_ADDR(PAGE_02, 0x12),

	//    BUFFER_OUT2_RW         =             , E_PAGE_02, 0x13),
	//        E_MASKREG_P02_BUFF_OUT2_force_dat2      = BINARY(0,0,1,1, 0,0,0,0),
	//    		E_MASKREG_P02_BUFF_OUT2_force_dat1      = BINARY(0,0,0,0, 1,1,0,0),
	//    		E_MASKREG_P02_BUFF_OUT2_force_dat0      = BINARY(0,0,0,0, 0,0,1,1),
	//
	//    SRL_TSTPAT0_RW         =             , E_PAGE_02, 0x14),
	//    SRL_TSTPAT1_RW         =             , E_PAGE_02, 0x15),
	//    SRL_TSTPAT2_RW         =             , E_PAGE_02, 0x16),
	//    SRL_TSTPAT3_RW         =             , E_PAGE_02, 0x17),
	//
	//
	//
	//
	//    EDID_DATA_0_R          =             , E_PAGE_09, 0x00),
	//    EDID_DATA_1_R          =             , E_PAGE_09, 0x01),
	//    EDID_DATA_2_R          =             , E_PAGE_09, 0x02),
	//    EDID_DATA_3_R          =             , E_PAGE_09, 0x03),
	//    EDID_DATA_4_R          =             , E_PAGE_09, 0x04),
	//    EDID_DATA_5_R          =             , E_PAGE_09, 0x05),
	//    EDID_DATA_6_R          =             , E_PAGE_09, 0x06),
	//    EDID_DATA_7_R          =             , E_PAGE_09, 0x07),
	//    EDID_DATA_8_R          =             , E_PAGE_09, 0x08),
	//    EDID_DATA_9_R          =             , E_PAGE_09, 0x09),
	//    EDID_DATA_10_R         =             , E_PAGE_09, 0x0A),
	//    EDID_DATA_11_R         =             , E_PAGE_09, 0x0B),
	//    EDID_DATA_12_R         =             , E_PAGE_09, 0x0C),
	//    EDID_DATA_13_R         =             , E_PAGE_09, 0x0D),
	//    EDID_DATA_14_R         =             , E_PAGE_09, 0x0E),
	//    EDID_DATA_15_R         =             , E_PAGE_09, 0x0F),
	//    EDID_DATA_16_R         =             , E_PAGE_09, 0x10),
	//    EDID_DATA_17_R         =             , E_PAGE_09, 0x11),
	//    EDID_DATA_18_R         =             , E_PAGE_09, 0x12),
	//    EDID_DATA_19_R         =             , E_PAGE_09, 0x13),
	//    EDID_DATA_20_R         =             , E_PAGE_09, 0x14),
	//    EDID_DATA_21_R         =             , E_PAGE_09, 0x15),
	//    EDID_DATA_22_R         =             , E_PAGE_09, 0x16),
	//    EDID_DATA_23_R         =             , E_PAGE_09, 0x17),
	//    EDID_DATA_24_R         =             , E_PAGE_09, 0x18),
	//    EDID_DATA_25_R         =             , E_PAGE_09, 0x19),
	//    EDID_DATA_26_R         =             , E_PAGE_09, 0x1A),
	//    EDID_DATA_27_R         =             , E_PAGE_09, 0x1B),
	//    EDID_DATA_28_R         =             , E_PAGE_09, 0x1C),
	//    EDID_DATA_29_R         =             , E_PAGE_09, 0x1D),
	//    EDID_DATA_30_R         =             , E_PAGE_09, 0x1E),
	//    EDID_DATA_31_R         =             , E_PAGE_09, 0x1F),
	//    EDID_DATA_32_R         =             , E_PAGE_09, 0x20),
	//    EDID_DATA_33_R         =             , E_PAGE_09, 0x21),
	//    EDID_DATA_34_R         =             , E_PAGE_09, 0x22),
	//    EDID_DATA_35_R         =             , E_PAGE_09, 0x23),
	//    EDID_DATA_36_R         =             , E_PAGE_09, 0x24),
	//    EDID_DATA_37_R         =             , E_PAGE_09, 0x25),
	//    EDID_DATA_38_R         =             , E_PAGE_09, 0x26),
	//    EDID_DATA_39_R         =             , E_PAGE_09, 0x27),
	//    EDID_DATA_40_R         =             , E_PAGE_09, 0x28),
	//    EDID_DATA_41_R         =             , E_PAGE_09, 0x29),
	//    EDID_DATA_42_R         =             , E_PAGE_09, 0x2A),
	//    EDID_DATA_43_R         =             , E_PAGE_09, 0x2B),
	//    EDID_DATA_44_R         =             , E_PAGE_09, 0x2C),
	//    EDID_DATA_45_R         =             , E_PAGE_09, 0x2D),
	//    EDID_DATA_46_R         =             , E_PAGE_09, 0x2E),
	//    EDID_DATA_47_R         =             , E_PAGE_09, 0x2F),
	//    EDID_DATA_48_R         =             , E_PAGE_09, 0x30),
	//    EDID_DATA_49_R         =             , E_PAGE_09, 0x31),
	//    EDID_DATA_50_R         =             , E_PAGE_09, 0x32),
	//    EDID_DATA_51_R         =             , E_PAGE_09, 0x33),
	//    EDID_DATA_52_R         =             , E_PAGE_09, 0x34),
	//    EDID_DATA_53_R         =             , E_PAGE_09, 0x35),
	//    EDID_DATA_54_R         =             , E_PAGE_09, 0x36),
	//    EDID_DATA_55_R         =             , E_PAGE_09, 0x37),
	//    EDID_DATA_56_R         =             , E_PAGE_09, 0x38),
	//    EDID_DATA_57_R         =             , E_PAGE_09, 0x39),
	//    EDID_DATA_58_R         =             , E_PAGE_09, 0x3A),
	//    EDID_DATA_59_R         =             , E_PAGE_09, 0x3B),
	//    EDID_DATA_60_R         =             , E_PAGE_09, 0x3C),
	//    EDID_DATA_61_R         =             , E_PAGE_09, 0x3D),
	//    EDID_DATA_62_R         =             , E_PAGE_09, 0x3E),
	//    EDID_DATA_63_R         =             , E_PAGE_09, 0x3F),
	//    EDID_DATA_64_R         =             , E_PAGE_09, 0x40),
	//    EDID_DATA_65_R         =             , E_PAGE_09, 0x41),
	//    EDID_DATA_66_R         =             , E_PAGE_09, 0x42),
	//    EDID_DATA_67_R         =             , E_PAGE_09, 0x43),
	//    EDID_DATA_68_R         =             , E_PAGE_09, 0x44),
	//    EDID_DATA_69_R         =             , E_PAGE_09, 0x45),
	//    EDID_DATA_70_R         =             , E_PAGE_09, 0x46),
	//    EDID_DATA_71_R         =             , E_PAGE_09, 0x47),
	//    EDID_DATA_72_R         =             , E_PAGE_09, 0x48),
	//    EDID_DATA_73_R         =             , E_PAGE_09, 0x49),
	//    EDID_DATA_74_R         =             , E_PAGE_09, 0x4A),
	//    EDID_DATA_75_R         =             , E_PAGE_09, 0x4B),
	//    EDID_DATA_76_R         =             , E_PAGE_09, 0x4C),
	//    EDID_DATA_77_R         =             , E_PAGE_09, 0x4D),
	//    EDID_DATA_78_R         =             , E_PAGE_09, 0x4E),
	//    EDID_DATA_79_R         =             , E_PAGE_09, 0x4F),
	//    EDID_DATA_80_R         =             , E_PAGE_09, 0x50),
	//    EDID_DATA_81_R         =             , E_PAGE_09, 0x51),
	//    EDID_DATA_82_R         =             , E_PAGE_09, 0x52),
	//    EDID_DATA_83_R         =             , E_PAGE_09, 0x53),
	//    EDID_DATA_84_R         =             , E_PAGE_09, 0x54),
	//    EDID_DATA_85_R         =             , E_PAGE_09, 0x55),
	//    EDID_DATA_86_R         =             , E_PAGE_09, 0x56),
	//    EDID_DATA_87_R         =             , E_PAGE_09, 0x57),
	//    EDID_DATA_88_R         =             , E_PAGE_09, 0x58),
	//    EDID_DATA_89_R         =             , E_PAGE_09, 0x59),
	//    EDID_DATA_90_R         =             , E_PAGE_09, 0x5A),
	//    EDID_DATA_91_R         =             , E_PAGE_09, 0x5B),
	//    EDID_DATA_92_R         =             , E_PAGE_09, 0x5C),
	//    EDID_DATA_93_R         =             , E_PAGE_09, 0x5D),
	//    EDID_DATA_94_R         =             , E_PAGE_09, 0x5E),
	//    EDID_DATA_95_R         =             , E_PAGE_09, 0x5F),
	//    EDID_DATA_96_R         =             , E_PAGE_09, 0x60),
	//    EDID_DATA_97_R         =             , E_PAGE_09, 0x61),
	//    EDID_DATA_98_R         =             , E_PAGE_09, 0x62),
	//    EDID_DATA_99_R         =             , E_PAGE_09, 0x63),
	//    EDID_DATA_100_R        =             , E_PAGE_09, 0x64),
	//    EDID_DATA_101_R        =             , E_PAGE_09, 0x65),
	//    EDID_DATA_102_R        =             , E_PAGE_09, 0x66),
	//    EDID_DATA_103_R        =             , E_PAGE_09, 0x67),
	//    EDID_DATA_104_R        =             , E_PAGE_09, 0x68),
	//    EDID_DATA_105_R        =             , E_PAGE_09, 0x69),
	//    EDID_DATA_106_R        =             , E_PAGE_09, 0x6A),
	//    EDID_DATA_107_R        =             , E_PAGE_09, 0x6B),
	//    EDID_DATA_108_R        =             , E_PAGE_09, 0x6C),
	//    EDID_DATA_109_R        =             , E_PAGE_09, 0x6D),
	//    EDID_DATA_110_R        =             , E_PAGE_09, 0x6E),
	//    EDID_DATA_111_R        =             , E_PAGE_09, 0x6F),
	//    EDID_DATA_112_R        =             , E_PAGE_09, 0x70),
	//    EDID_DATA_113_R        =             , E_PAGE_09, 0x71),
	//    EDID_DATA_114_R        =             , E_PAGE_09, 0x72),
	//    EDID_DATA_115_R        =             , E_PAGE_09, 0x73),
	//    EDID_DATA_116_R        =             , E_PAGE_09, 0x74),
	//    EDID_DATA_117_R        =             , E_PAGE_09, 0x75),
	//    EDID_DATA_118_R        =             , E_PAGE_09, 0x76),
	//    EDID_DATA_119_R        =             , E_PAGE_09, 0x77),
	//    EDID_DATA_120_R        =             , E_PAGE_09, 0x78),
	//    EDID_DATA_121_R        =             , E_PAGE_09, 0x79),
	//    EDID_DATA_122_R        =             , E_PAGE_09, 0x7A),
	//    EDID_DATA_123_R        =             , E_PAGE_09, 0x7B),
	//    EDID_DATA_124_R        =             , E_PAGE_09, 0x7C),
	//    EDID_DATA_125_R        =             , E_PAGE_09, 0x7D),
	//    EDID_DATA_126_R        =             , E_PAGE_09, 0x7E),
	//    EDID_DATA_127_R        =             , E_PAGE_09, 0x7F),
	//    EDID_CTRL_RW           =             , E_PAGE_09, 0xFA),
	//		    E_MASKREG_P09_EDID_CTRL_edid_rd         (1 << 0)
	//
	//    DDC_ADDR_RW            =             , E_PAGE_09, 0xFB),
	//    DDC_OFFS_RW            =             , E_PAGE_09, 0xFC),
	//    DDC_SEGM_ADDR_RW       =             , E_PAGE_09, 0xFD),
	//    DDC_SEGM_RW            =             , E_PAGE_09, 0xFE),
	//
	//
	//
	//
	//
	//    IF1_HB0_RW             =             , E_PAGE_10, 0x20),
	//    IF1_HB1_RW             =             , E_PAGE_10, 0x21),
	//    IF1_HB2_RW             =             , E_PAGE_10, 0x22),
	//    IF1_PB0_RW             =             , E_PAGE_10, 0x23),
	//    IF1_PB1_RW             =             , E_PAGE_10, 0x24),
	//    IF1_PB2_RW             =             , E_PAGE_10, 0x25),
	//    IF1_PB3_RW             =             , E_PAGE_10, 0x26),
	//    IF1_PB4_RW             =             , E_PAGE_10, 0x27),
	//    IF1_PB5_RW             =             , E_PAGE_10, 0x28),
	//    IF1_PB6_RW             =             , E_PAGE_10, 0x29),
	//    IF1_PB7_RW             =             , E_PAGE_10, 0x2A),
	//    IF1_PB8_RW             =             , E_PAGE_10, 0x2B),
	//    IF1_PB9_RW             =             , E_PAGE_10, 0x2C),
	//    IF1_PB10_RW            =             , E_PAGE_10, 0x2D),
	//    IF1_PB11_RW            =             , E_PAGE_10, 0x2E),
	//    IF1_PB12_RW            =             , E_PAGE_10, 0x2F),
	//    IF1_PB13_RW            =             , E_PAGE_10, 0x30),
	//    IF1_PB14_RW            =             , E_PAGE_10, 0x31),
	//    IF1_PB15_RW            =             , E_PAGE_10, 0x32),
	//    IF1_PB16_RW            =             , E_PAGE_10, 0x33),
	//    IF1_PB17_RW            =             , E_PAGE_10, 0x34),
	//    IF1_PB18_RW            =             , E_PAGE_10, 0x35),
	//    IF1_PB19_RW            =             , E_PAGE_10, 0x36),
	//    IF1_PB20_RW            =             , E_PAGE_10, 0x37),
	//    IF1_PB21_RW            =             , E_PAGE_10, 0x38),
	//    IF1_PB22_RW            =             , E_PAGE_10, 0x39),
	//    IF1_PB23_RW            =             , E_PAGE_10, 0x3A),
	//    IF1_PB24_RW            =             , E_PAGE_10, 0x3B),
	//    IF1_PB25_RW            =             , E_PAGE_10, 0x3C),
	//    IF1_PB26_RW            =             , E_PAGE_10, 0x3D),
	//    IF1_PB27_RW            =             , E_PAGE_10, 0x3E),
	//    IF2_HB0_RW             =             , E_PAGE_10, 0x40),
	//    IF2_HB1_RW             =             , E_PAGE_10, 0x41),
	//    IF2_HB2_RW             =             , E_PAGE_10, 0x42),
	//    IF2_PB0_RW             =             , E_PAGE_10, 0x43),
	//    IF2_PB1_RW             =             , E_PAGE_10, 0x44),
	//    IF2_PB2_RW             =             , E_PAGE_10, 0x45),
	//    IF2_PB3_RW             =             , E_PAGE_10, 0x46),
	//    IF2_PB4_RW             =             , E_PAGE_10, 0x47),
	//    IF2_PB5_RW             =             , E_PAGE_10, 0x48),
	//    IF2_PB6_RW             =             , E_PAGE_10, 0x49),
	//    IF2_PB7_RW             =             , E_PAGE_10, 0x4A),
	//    IF2_PB8_RW             =             , E_PAGE_10, 0x4B),
	//    IF2_PB9_RW             =             , E_PAGE_10, 0x4C),
	//    IF2_PB10_RW            =             , E_PAGE_10, 0x4D),
	//    IF2_PB11_RW            =             , E_PAGE_10, 0x4E),
	//    IF2_PB12_RW            =             , E_PAGE_10, 0x4F),
	//    IF2_PB13_RW            =             , E_PAGE_10, 0x50),
	//    IF2_PB14_RW            =             , E_PAGE_10, 0x51),
	//    IF2_PB15_RW            =             , E_PAGE_10, 0x52),
	//    IF2_PB16_RW            =             , E_PAGE_10, 0x53),
	//    IF2_PB17_RW            =             , E_PAGE_10, 0x54),
	//    IF2_PB18_RW            =             , E_PAGE_10, 0x55),
	//    IF2_PB19_RW            =             , E_PAGE_10, 0x56),
	//    IF2_PB20_RW            =             , E_PAGE_10, 0x57),
	//    IF2_PB21_RW            =             , E_PAGE_10, 0x58),
	//    IF2_PB22_RW            =             , E_PAGE_10, 0x59),
	//    IF2_PB23_RW            =             , E_PAGE_10, 0x5A),
	//    IF2_PB24_RW            =             , E_PAGE_10, 0x5B),
	//    IF2_PB25_RW            =             , E_PAGE_10, 0x5C),
	//    IF2_PB26_RW            =             , E_PAGE_10, 0x5D),
	//    IF2_PB27_RW            =             , E_PAGE_10, 0x5E),
	//    IF3_HB0_RW             =             , E_PAGE_10, 0x60),
	//    IF3_HB1_RW             =             , E_PAGE_10, 0x61),
	//    IF3_HB2_RW             =             , E_PAGE_10, 0x62),
	//    IF3_PB0_RW             =             , E_PAGE_10, 0x63),
	//    IF3_PB1_RW             =             , E_PAGE_10, 0x64),
	//    IF3_PB2_RW             =             , E_PAGE_10, 0x65),
	//    IF3_PB3_RW             =             , E_PAGE_10, 0x66),
	//    IF3_PB4_RW             =             , E_PAGE_10, 0x67),
	//    IF3_PB5_RW             =             , E_PAGE_10, 0x68),
	//    IF3_PB6_RW             =             , E_PAGE_10, 0x69),
	//    IF3_PB7_RW             =             , E_PAGE_10, 0x6A),
	//    IF3_PB8_RW             =             , E_PAGE_10, 0x6B),
	//    IF3_PB9_RW             =             , E_PAGE_10, 0x6C),
	//    IF3_PB10_RW            =             , E_PAGE_10, 0x6D),
	//    IF3_PB11_RW            =             , E_PAGE_10, 0x6E),
	//    IF3_PB12_RW            =             , E_PAGE_10, 0x6F),
	//    IF3_PB13_RW            =             , E_PAGE_10, 0x70),
	//    IF3_PB14_RW            =             , E_PAGE_10, 0x71),
	//    IF3_PB15_RW            =             , E_PAGE_10, 0x72),
	//    IF3_PB16_RW            =             , E_PAGE_10, 0x73),
	//    IF3_PB17_RW            =             , E_PAGE_10, 0x74),
	//    IF3_PB18_RW            =             , E_PAGE_10, 0x75),
	//    IF3_PB19_RW            =             , E_PAGE_10, 0x76),
	//    IF3_PB20_RW            =             , E_PAGE_10, 0x77),
	//    IF3_PB21_RW            =             , E_PAGE_10, 0x78),
	//    IF3_PB22_RW            =             , E_PAGE_10, 0x79),
	//    IF3_PB23_RW            =             , E_PAGE_10, 0x7A),
	//    IF3_PB24_RW            =             , E_PAGE_10, 0x7B),
	//    IF3_PB25_RW            =             , E_PAGE_10, 0x7C),
	//    IF3_PB26_RW            =             , E_PAGE_10, 0x7D),
	//    IF3_PB27_RW            =             , E_PAGE_10, 0x7E),
	//    IF4_HB0_RW             =             , E_PAGE_10, 0x80),
	//    IF4_HB1_RW             =             , E_PAGE_10, 0x81),
	//    IF4_HB2_RW             =             , E_PAGE_10, 0x82),
	//    IF4_PB0_RW             =             , E_PAGE_10, 0x83),
	//    IF4_PB1_RW             =             , E_PAGE_10, 0x84),
	//    IF4_PB2_RW             =             , E_PAGE_10, 0x85),
	//    IF4_PB3_RW             =             , E_PAGE_10, 0x86),
	//    IF4_PB4_RW             =             , E_PAGE_10, 0x87),
	//    IF4_PB5_RW             =             , E_PAGE_10, 0x88),
	//    IF4_PB6_RW             =             , E_PAGE_10, 0x89),
	//    IF4_PB7_RW             =             , E_PAGE_10, 0x8A),
	//    IF4_PB8_RW             =             , E_PAGE_10, 0x8B),
	//    IF4_PB9_RW             =             , E_PAGE_10, 0x8C),
	//    IF4_PB10_RW            =             , E_PAGE_10, 0x8D),
	//    IF4_PB11_RW            =             , E_PAGE_10, 0x8E),
	//    IF4_PB12_RW            =             , E_PAGE_10, 0x8F),
	//    IF4_PB13_RW            =             , E_PAGE_10, 0x90),
	//    IF4_PB14_RW            =             , E_PAGE_10, 0x91),
	//    IF4_PB15_RW            =             , E_PAGE_10, 0x92),
	//    IF4_PB16_RW            =             , E_PAGE_10, 0x93),
	//    IF4_PB17_RW            =             , E_PAGE_10, 0x94),
	//    IF4_PB18_RW            =             , E_PAGE_10, 0x95),
	//    IF4_PB19_RW            =             , E_PAGE_10, 0x96),
	//    IF4_PB20_RW            =             , E_PAGE_10, 0x97),
	//    IF4_PB21_RW            =             , E_PAGE_10, 0x98),
	//    IF4_PB22_RW            =             , E_PAGE_10, 0x99),
	//    IF4_PB23_RW            =             , E_PAGE_10, 0x9A),
	//    IF4_PB24_RW            =             , E_PAGE_10, 0x9B),
	//    IF4_PB25_RW            =             , E_PAGE_10, 0x9C),
	//    IF4_PB26_RW            =             , E_PAGE_10, 0x9D),
	//    IF4_PB27_RW            =             , E_PAGE_10, 0x9E),
	//    IF5_HB0_RW             =             , E_PAGE_10, 0xA0),
	//    IF5_HB1_RW             =             , E_PAGE_10, 0xA1),
	//    IF5_HB2_RW             =             , E_PAGE_10, 0xA2),
	//    IF5_PB0_RW             =             , E_PAGE_10, 0xA3),
	//    IF5_PB1_RW             =             , E_PAGE_10, 0xA4),
	//    IF5_PB2_RW             =             , E_PAGE_10, 0xA5),
	//    IF5_PB3_RW             =             , E_PAGE_10, 0xA6),
	//    IF5_PB4_RW             =             , E_PAGE_10, 0xA7),
	//    IF5_PB5_RW             =             , E_PAGE_10, 0xA8),
	//    IF5_PB6_RW             =             , E_PAGE_10, 0xA9),
	//    IF5_PB7_RW             =             , E_PAGE_10, 0xAA),
	//    IF5_PB8_RW             =             , E_PAGE_10, 0xAB),
	//    IF5_PB9_RW             =             , E_PAGE_10, 0xAC),
	//    IF5_PB10_RW            =             , E_PAGE_10, 0xAD),
	//    IF5_PB11_RW            =             , E_PAGE_10, 0xAE),
	//    IF5_PB12_RW            =             , E_PAGE_10, 0xAF),
	//    IF5_PB13_RW            =             , E_PAGE_10, 0xB0),
	//    IF5_PB14_RW            =             , E_PAGE_10, 0xB1),
	//    IF5_PB15_RW            =             , E_PAGE_10, 0xB2),
	//    IF5_PB16_RW            =             , E_PAGE_10, 0xB3),
	//    IF5_PB17_RW            =             , E_PAGE_10, 0xB4),
	//    IF5_PB18_RW            =             , E_PAGE_10, 0xB5),
	//    IF5_PB19_RW            =             , E_PAGE_10, 0xB6),
	//    IF5_PB20_RW            =             , E_PAGE_10, 0xB7),
	//    IF5_PB21_RW            =             , E_PAGE_10, 0xB8),
	//    IF5_PB22_RW            =             , E_PAGE_10, 0xB9),
	//    IF5_PB23_RW            =             , E_PAGE_10, 0xBA),
	//    IF5_PB24_RW            =             , E_PAGE_10, 0xBB),
	//    IF5_PB25_RW            =             , E_PAGE_10, 0xBC),
	//    IF5_PB26_RW            =             , E_PAGE_10, 0xBD),
	//    IF5_PB27_RW            =             , E_PAGE_10, 0xBE),
	//
	//    AIP_CNTRL_0_RW         =             , E_PAGE_11, 0x00),
	//        E_MASKREG_P11_AIP_CNTRL_0_rst_cts       = BINARY(0,1,0,0, 0,0,0,0),
	//		    E_MASKREG_P11_AIP_CNTRL_0_acr_man       = BINARY(0,0,1,0, 0,0,0,0),
	//  		  E_MASKREG_P11_AIP_CNTRL_0_layout        = BINARY(0,0,0,0, 0,1,0,0),
	//    		E_MASKREG_P11_AIP_CNTRL_0_swap         (1 << 1)
	//	    	E_MASKREG_P11_AIP_CNTRL_0_rst_fifo      (1 << 0)
	//
	//    CA_I2S_RW              =             , E_PAGE_11, 0x01),
	//        E_MASKREG_P11_CA_I2S_hbr_chstat_4       = BINARY(0,0,1,0, 0,0,0,0),
	//    		E_MASKREG_P11_CA_I2S_ca_i2s             = BINARY(0,0,0,1, 1,1,1,1),
	//
	//    CA_DSD_RW              =             , E_PAGE_11, 0x02),
	//    OBA_PH_RW              =             , E_PAGE_11, 0x03),
	//    LATENCY_RD_RW          =             , E_PAGE_11, 0x04),
	//    ACR_CTS_0_RW           =             , E_PAGE_11, 0x05),
	//    ACR_CTS_1_RW           =             , E_PAGE_11, 0x06),
	//    ACR_CTS_2_RW           =             , E_PAGE_11, 0x07),
	//    ACR_N_0_RW             =             , E_PAGE_11, 0x08),
	//    ACR_N_1_RW             =             , E_PAGE_11, 0x09),
	//    ACR_N_2_RW             =             , E_PAGE_11, 0x0A),
	//    GC_AVMUTE_RW           =             , E_PAGE_11, 0x0B),
	//        E_MASKREG_P11_GC_AVMUTE_set_mute       (1 << 1)
	//    		E_MASKREG_P11_GC_AVMUTE_clr_mute        (1 << 0)
	//    		E_MASKREG_P11_GC_AVMUTE_setclr_mute     = BINARY(0,0,0,0, 0,0,1,1),
	//
	//    CTS_N_RW               =             , E_PAGE_11, 0x0C),
	//        E_MASKREG_P11_CTS_N_m_sel               = BINARY(0,0,1,1, 0,0,0,0),
	//    		E_MASKREG_P11_CTS_N_k_sel               = BINARY(0,0,0,0, 0,1,1,1),
	//
	//    ENC_CNTRL_RW           =             , E_PAGE_11, 0x0D),
	//        E_MASKREG_P11_ENC_CNTRL_ctl_code        = BINARY(0,0,0,0, 1,1,0,0),
	//    		E_MASKREG_P11_ENC_CNTRL_rst_sel        (1 << 1)
	//    		E_MASKREG_P11_ENC_CNTRL_rst_enc         (1 << 0)
	//
	//    DIP_FLAGS_RW           =             , E_PAGE_11, 0x0E),
	//        E_MASKREG_P11_DIP_FLAGS_force_null      = BINARY(1,0,0,0, 0,0,0,0),
	//    		E_MASKREG_P11_DIP_FLAGS_null            = BINARY(0,1,0,0, 0,0,0,0),
	//    		E_MASKREG_P11_DIP_FLAGS_acp             = BINARY(0,0,0,1, 0,0,0,0),
	//    		E_MASKREG_P11_DIP_FLAGS_isrc2           = BINARY(0,0,0,0, 1,0,0,0),
	//    		E_MASKREG_P11_DIP_FLAGS_isrc1           = BINARY(0,0,0,0, 0,1,0,0),
	//    		E_MASKREG_P11_DIP_FLAGS_gc             (1 << 1)
	//    		E_MASKREG_P11_DIP_FLAGS_acr             (1 << 0)
	//
	//    DIP_IF_FLAGS_RW        =             , E_PAGE_11, 0x0F),
	//        E_MASKREG_P11_DIP_IF_FLAGS_if5          = BINARY(0,0,1,0, 0,0,0,0),
	//    		E_MASKREG_P11_DIP_IF_FLAGS_if4          = BINARY(0,0,0,1, 0,0,0,0),
	//    		E_MASKREG_P11_DIP_IF_FLAGS_if3          = BINARY(0,0,0,0, 1,0,0,0),
	//    		E_MASKREG_P11_DIP_IF_FLAGS_if2          = BINARY(0,0,0,0, 0,1,0,0),
	//   			E_MASKREG_P11_DIP_IF_FLAGS_if1         (1 << 1)
	//
	//
	//    CH_STAT_B_0_RW         =             , E_PAGE_11, 0x14),
	//    CH_STAT_B_1_RW         =             , E_PAGE_11, 0x15),
	//    CH_STAT_B_3_RW         =             , E_PAGE_11, 0x16),
	//    CH_STAT_B_4_RW         =             , E_PAGE_11, 0x17),
	//    CH_STAT_B_2_ap0_l_RW   =             , E_PAGE_11, 0x18),
	//    CH_STAT_B_2_ap0_r_RW   =             , E_PAGE_11, 0x19),
	//    CH_STAT_B_2_ap1_l_RW   =             , E_PAGE_11, 0x1A),
	//    CH_STAT_B_2_ap1_r_RW   =             , E_PAGE_11, 0x1B),
	//    CH_STAT_B_2_ap2_l_RW   =             , E_PAGE_11, 0x1C),
	//    CH_STAT_B_2_ap2_r_RW   =             , E_PAGE_11, 0x1D),
	//    CH_STAT_B_2_ap3_l_RW   =             , E_PAGE_11, 0x1E),
	//    CH_STAT_B_2_ap3_r_RW   =             , E_PAGE_11, 0x1F),
	//    ISRC1_HB0_RW           =             , E_PAGE_11, 0x20),
	//    ISRC1_HB1_RW           =             , E_PAGE_11, 0x21),
	//    ISRC1_HB2_RW           =             , E_PAGE_11, 0x22),
	//    ISRC1_PB0_RW           =             , E_PAGE_11, 0x23),
	//    ISRC1_PB1_RW           =             , E_PAGE_11, 0x24),
	//    ISRC1_PB2_RW           =             , E_PAGE_11, 0x25),
	//    ISRC1_PB3_RW           =             , E_PAGE_11, 0x26),
	//    ISRC1_PB4_RW           =             , E_PAGE_11, 0x27),
	//    ISRC1_PB5_RW           =             , E_PAGE_11, 0x28),
	//    ISRC1_PB6_RW           =             , E_PAGE_11, 0x29),
	//    ISRC1_PB7_RW           =             , E_PAGE_11, 0x2A),
	//    ISRC1_PB8_RW           =             , E_PAGE_11, 0x2B),
	//    ISRC1_PB9_RW           =             , E_PAGE_11, 0x2C),
	//    ISRC1_PB10_RW          =             , E_PAGE_11, 0x2D),
	//    ISRC1_PB11_RW          =             , E_PAGE_11, 0x2E),
	//    ISRC1_PB12_RW          =             , E_PAGE_11, 0x2F),
	//    ISRC1_PB13_RW          =             , E_PAGE_11, 0x30),
	//    ISRC1_PB14_RW          =             , E_PAGE_11, 0x31),
	//    ISRC1_PB15_RW          =             , E_PAGE_11, 0x32),
	//    ISRC1_PB16_RW          =             , E_PAGE_11, 0x33),
	//    ISRC1_PB17_RW          =             , E_PAGE_11, 0x34),
	//    ISRC1_PB18_RW          =             , E_PAGE_11, 0x35),
	//    ISRC1_PB19_RW          =             , E_PAGE_11, 0x36),
	//    ISRC1_PB20_RW          =             , E_PAGE_11, 0x37),
	//    ISRC1_PB21_RW          =             , E_PAGE_11, 0x38),
	//    ISRC1_PB22_RW          =             , E_PAGE_11, 0x39),
	//    ISRC1_PB23_RW          =             , E_PAGE_11, 0x3A)    ,
	//    ISRC1_PB24_RW          =             , E_PAGE_11, 0x3B)    ,
	//    ISRC1_PB25_RW          =             , E_PAGE_11, 0x3C),
	//    ISRC1_PB26_RW          =             , E_PAGE_11, 0x3D),
	//    ISRC1_PB27_RW          =             , E_PAGE_11, 0x3E),
	//    ISRC2_HB0_RW           =             , E_PAGE_11, 0x40),
	//    ISRC2_HB1_RW           =             , E_PAGE_11, 0x41),
	//    ISRC2_HB2_RW           =             , E_PAGE_11, 0x42),
	//    ISRC2_PB0_RW           =             , E_PAGE_11, 0x43),
	//    ISRC2_PB1_RW           =             , E_PAGE_11, 0x44),
	//    ISRC2_PB2_RW           =             , E_PAGE_11, 0x45),
	//    ISRC2_PB3_RW           =             , E_PAGE_11, 0x46),
	//    ISRC2_PB4_RW           =             , E_PAGE_11, 0x47),
	//    ISRC2_PB5_RW           =             , E_PAGE_11, 0x48),
	//    ISRC2_PB6_RW           =             , E_PAGE_11, 0x49),
	//    ISRC2_PB7_RW           =             , E_PAGE_11, 0x4A),
	//    ISRC2_PB8_RW           =             , E_PAGE_11, 0x4B),
	//    ISRC2_PB9_RW           =             , E_PAGE_11, 0x4C),
	//    ISRC2_PB10_RW          =             , E_PAGE_11, 0x4D),
	//    ISRC2_PB11_RW          =             , E_PAGE_11, 0x4E),
	//    ISRC2_PB12_RW          =             , E_PAGE_11, 0x4F),
	//    ISRC2_PB13_RW          =             , E_PAGE_11, 0x50),
	//    ISRC2_PB14_RW          =             , E_PAGE_11, 0x51),
	//    ISRC2_PB15_RW          =             , E_PAGE_11, 0x52),
	//    ISRC2_PB16_RW          =             , E_PAGE_11, 0x53),
	//    ISRC2_PB17_RW          =             , E_PAGE_11, 0x54),
	//    ISRC2_PB18_RW          =             , E_PAGE_11, 0x55),
	//    ISRC2_PB19_RW          =             , E_PAGE_11, 0x56),
	//    ISRC2_PB20_RW          =             , E_PAGE_11, 0x57),
	//    ISRC2_PB21_RW          =             , E_PAGE_11, 0x58),
	//    ISRC2_PB22_RW          =             , E_PAGE_11, 0x59),
	//    ISRC2_PB23_RW          =             , E_PAGE_11, 0x5A),
	//    ISRC2_PB24_RW          =             , E_PAGE_11, 0x5B),
	//    ISRC2_PB25_RW          =             , E_PAGE_11, 0x5C),
	//    ISRC2_PB26_RW          =             , E_PAGE_11, 0x5D),
	//    ISRC2_PB27_RW          =             , E_PAGE_11, 0x5E),
	//    ACP_HB0_RW             =             , E_PAGE_11, 0x60),
	//    ACP_HB1_RW             =             , E_PAGE_11, 0x61),
	//    ACP_HB2_RW             =             , E_PAGE_11, 0x62),
	//    ACP_PB0_RW             =             , E_PAGE_11, 0x63),
	//    ACP_PB1_RW             =             , E_PAGE_11, 0x64),
	//    ACP_PB2_RW             =             , E_PAGE_11, 0x65),
	//    ACP_PB3_RW             =             , E_PAGE_11, 0x66),
	//    ACP_PB4_RW             =             , E_PAGE_11, 0x67),
	//    ACP_PB5_RW             =             , E_PAGE_11, 0x68),
	//    ACP_PB6_RW             =             , E_PAGE_11, 0x69),
	//    ACP_PB7_RW             =             , E_PAGE_11, 0x6A),
	//    ACP_PB8_RW             =             , E_PAGE_11, 0x6B),
	//    ACP_PB9_RW             =             , E_PAGE_11, 0x6C),
	//    ACP_PB10_RW            =             , E_PAGE_11, 0x6D),
	//    ACP_PB11_RW            =             , E_PAGE_11, 0x6E),
	//    ACP_PB12_RW            =             , E_PAGE_11, 0x6F),
	//    ACP_PB13_RW            =             , E_PAGE_11, 0x70),
	//    ACP_PB14_RW            =             , E_PAGE_11, 0x71),
	//    ACP_PB15_RW            =             , E_PAGE_11, 0x72),
	//    ACP_PB16_RW            =             , E_PAGE_11, 0x73),
	//    ACP_PB17_RW            =             , E_PAGE_11, 0x74),
	//    ACP_PB18_RW            =             , E_PAGE_11, 0x75),
	//    ACP_PB19_RW            =             , E_PAGE_11, 0x76),
	//    ACP_PB20_RW            =             , E_PAGE_11, 0x77),
	//    ACP_PB21_RW            =             , E_PAGE_11, 0x78),
	//    ACP_PB22_RW            =             , E_PAGE_11, 0x79),
	//    ACP_PB23_RW            =             , E_PAGE_11, 0x7A),
	//    ACP_PB24_RW            =             , E_PAGE_11, 0x7B),
	//    ACP_PB25_RW            =             , E_PAGE_11, 0x7C),
	//    ACP_PB26_RW            =             , E_PAGE_11, 0x7D),
	//    ACP_PB27_RW            =             , E_PAGE_11, 0x7E),
	//
	//

	OTP_TX3			= PAGE_ADDR(PAGE_12, 0x9A),


	//    GMD_0_HB0_RW           =             , E_PAGE_13, 0x00),
	//    GMD_0_HB1_RW           =             , E_PAGE_13, 0x01),
	//    GMD_0_HB2_RW           =             , E_PAGE_13, 0x02),
	//    GMD_0_PB0_RW           =             , E_PAGE_13, 0x03),
	//    GMD_0_PB1_RW           =             , E_PAGE_13, 0x04),
	//    GMD_0_PB2_RW           =             , E_PAGE_13, 0x05),
	//    GMD_0_PB3_RW           =             , E_PAGE_13, 0x06),
	//    GMD_0_PB4_RW           =             , E_PAGE_13, 0x07),
	//    GMD_0_PB5_RW           =             , E_PAGE_13, 0x08),
	//    GMD_0_PB6_RW           =             , E_PAGE_13, 0x09),
	//    GMD_0_PB7_RW           =             , E_PAGE_13, 0x0A),
	//    GMD_0_PB8_RW           =             , E_PAGE_13, 0x0B),
	//    GMD_0_PB9_RW           =             , E_PAGE_13, 0x0C),
	//    GMD_0_PB10_RW          =             , E_PAGE_13, 0x0D),
	//    GMD_0_PB11_RW          =             , E_PAGE_13, 0x0E),
	//    GMD_0_PB12_RW          =             , E_PAGE_13, 0x0F),
	//    GMD_0_PB13_RW          =             , E_PAGE_13, 0x10),
	//    GMD_0_PB14_RW          =             , E_PAGE_13, 0x11),
	//    GMD_0_PB15_RW          =             , E_PAGE_13, 0x12),
	//    GMD_0_PB16_RW          =             , E_PAGE_13, 0x13),
	//    GMD_0_PB17_RW          =             , E_PAGE_13, 0x14),
	//    GMD_0_PB18_RW          =             , E_PAGE_13, 0x15),
	//    GMD_0_PB19_RW          =             , E_PAGE_13, 0x16),
	//    GMD_0_PB20_RW          =             , E_PAGE_13, 0x17),
	//    GMD_0_PB21_RW          =             , E_PAGE_13, 0x18),
	//    GMD_0_PB22_RW          =             , E_PAGE_13, 0x19),
	//    GMD_0_PB23_RW          =             , E_PAGE_13, 0x1A),
	//    GMD_0_PB24_RW          =             , E_PAGE_13, 0x1B),
	//    GMD_0_PB25_RW          =             , E_PAGE_13, 0x1C),
	//    GMD_0_PB26_RW          =             , E_PAGE_13, 0x1D),
	//    GMD_0_PB27_RW          =             , E_PAGE_13, 0x1E),
	//    GMD_CONTROL_RW         =             , E_PAGE_13, 0x1F),
	//        E_MASKREG_P13_GMD_CONTROL_buf_sel      (1 << 1)
	//		    E_MASKREG_P13_GMD_CONTROL_enable        = BINARY(0,0,0,0, 0,0,0,1)
	//
	//    GMD_1_HB0_RW           =             , E_PAGE_13, 0x20),
	//    GMD_1_HB1_RW           =             , E_PAGE_13, 0x21),
	//    GMD_1_HB2_RW           =             , E_PAGE_13, 0x22),
	//    GMD_1_PB0_RW           =             , E_PAGE_13, 0x23),
	//    GMD_1_PB1_RW           =             , E_PAGE_13, 0x24),
	//    GMD_1_PB2_RW           =             , E_PAGE_13, 0x25),
	//    GMD_1_PB3_RW           =             , E_PAGE_13, 0x26),
	//    GMD_1_PB4_RW           =             , E_PAGE_13, 0x27),
	//    GMD_1_PB5_RW           =             , E_PAGE_13, 0x28),
	//    GMD_1_PB6_RW           =             , E_PAGE_13, 0x29),
	//    GMD_1_PB7_RW           =             , E_PAGE_13, 0x2A),
	//    GMD_1_PB8_RW           =             , E_PAGE_13, 0x2B),
	//    GMD_1_PB9_RW           =             , E_PAGE_13, 0x2C),
	//    GMD_1_PB10_RW          =             , E_PAGE_13, 0x2D),
	//    GMD_1_PB11_RW          =             , E_PAGE_13, 0x2E),
	//    GMD_1_PB12_RW          =             , E_PAGE_13, 0x2F),
	//    GMD_1_PB13_RW          =             , E_PAGE_13, 0x30),
	//    GMD_1_PB14_RW          =             , E_PAGE_13, 0x31),
	//    GMD_1_PB15_RW          =             , E_PAGE_13, 0x32),
	//    GMD_1_PB16_RW          =             , E_PAGE_13, 0x33),
	//    GMD_1_PB17_RW          =             , E_PAGE_13, 0x34),
	//    GMD_1_PB18_RW          =             , E_PAGE_13, 0x35),
	//    GMD_1_PB19_RW          =             , E_PAGE_13, 0x36),
	//    GMD_1_PB20_RW          =             , E_PAGE_13, 0x37),
	//    GMD_1_PB21_RW          =             , E_PAGE_13, 0x38),
	//    GMD_1_PB22_RW          =             , E_PAGE_13, 0x39),
	//    GMD_1_PB23_RW          =             , E_PAGE_13, 0x3A),
	//    GMD_1_PB24_RW          =             , E_PAGE_13, 0x3B),
	//    GMD_1_PB25_RW          =             , E_PAGE_13, 0x3C),
	//    GMD_1_PB26_RW          =             , E_PAGE_13, 0x3D),
	//    GMD_1_PB27_RW          =             , E_PAGE_13, 0x3E)

	CURPAGE			= PAGE_ADDR(PAGE_INVALID, 0xFF),
};

//};


/**
 * @brief	TDA998X driver configuration
 */
struct tda998x_cfg {
	uint8_t				id;
	uint16_t			hdmi_addr;
	uint16_t			cec_addr;
	int (*i2c_write)		(uint16_t addr, uint8_t reg, uint8_t *data);
	int (*i2c_read)			(uint16_t addr, uint8_t reg, uint8_t *data);
};

/**
 * @brief	TDA998X device
 */
struct tda998x_dev {
	int				id;
	struct tda998x_cfg		*cfg;
	enum tda998x_hdmi_page		cur_page;
};

/**
 * @}
 */

#ifdef __cplusplus
}
#endif

#endif /* __TDA998X_H */
